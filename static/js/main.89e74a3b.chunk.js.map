{"version":3,"sources":["LeafletMap.js","config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","BlockNumber.js","Events.js","Metadata.js","NodeInfo.js","helpers.js","Transfer.js","data.js","ApnConfirmer.js","ApnFinder.js","ApnTable.js","MapRefresh.js","ApnMap.js","AllocationDistributor.js","assets/emptymap.js","GeoJsonMap.js","Register_new_account.js","App.js","index.js"],"names":["LeafletMap","mapPositions","className","center","zoom","TileLayer","attribution","url","configEnv","require","types","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","afterSubmit","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","Object","getPrototypeOf","Uint8Array","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","target","rel","href","Image","src","size","position","alignItems","circular","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","AccountSelector","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","unsubscribeAll","number","toNumber","timer","time","id","setInterval","clearInterval","Grid","Column","display","Icon","BlockNumber","FILTERED_EVENTS","eventFeed","setEventFeed","system","events","record","event","phase","typeDef","eventName","section","method","includes","data","index","summary","extraText","documentation","join","content","allEvents","feedMaxHeight","width","float","floated","Feed","clear","overflow","maxHeight","Events","version","metadata","setMetadata","getMetadata","Modal","trigger","compact","Header","Content","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","NodeInfo","encodeApnHuman","apn","i","human","encodeApn","prefix","codeUnits","charCodeAt","base64","String","fromCharCode","buffer","padding","bytes","j","typeBytes","decodeApn","encodedApn","hasPadding","char","chars","push","addressFrom","addressTo","amount","formState","setFormState","prev","setAddressFromEncoded","setAddressToEncoded","addressFromEncoded","addressToEncoded","Form","Field","Input","fluid","textAlign","interxType","overflowWrap","initInputParams","apnData","open","setOpen","setInputParams","val","onClose","Actions","labelPosition","positive","ApnConfirmer","setApn","setApnData","handleSubmit","fetch","res1","json","data1","res","ok","apnEnc","claimer","lookup","proxyId","toHuman","proxies","accountInfo","delegateInfo","delegateId","delegate","accountAddress","owner","apnFound","alert","Row","onSubmit","ev","ApnFinder","centerMap","coords","setMapBounds","maxLat","MAX_VALUE","minLat","maxLon","minLon","lon","lat","getBounds","rows","apnStatusList","Table","Cell","isRegulator","alloc","height","celled","HeaderCell","Body","ApnTable","getKeysPaged","lookupRes","toHex","proxy","ownerMap","apnList","ownership","apnListFound","dbData","find","MapRefresh","mapCenter","mapZoom","mapBounds","parcelInfo","useMap","triggerGeoReRender","setTriggerGeoReRender","setView","fitBounds","opacity","GeoJSON","feature","weight","fillOpacity","fillColor","properties","onEachFeature","layer","popupContent","crop2016","agency_name","county","acres","shape_area","bindPopup","maxWidth","ApnMap","unique","datum","filter","p","right","top","apnData1","setApnData1","apnData2","setApnData2","apnData3","setApnData3","lng","initParcelInfo","setParcelInfo","setApnList","setApnStatusList","setIsRegulator","refreshApnList","features","claim","parsePolygon","geometry","coordinates","uniqueApns","statusList","allocator","balances","geometryStr","coordSet","columns","MapContainer","minHeight","Radio","toggle","checked","args","marginTop","GeoJsonMap","accountPair1","getPair","loader","Dimmer","active","Loader","centered","padded","Message","negative","floating","header","contextRef","createRef","document","body","ref","Sticky","context","stackable","Divider","stretched","App","ReactDOM","render","getElementById"],"mappings":"8iCAoBeA,EAjBI,WACf,IAAMC,EAAe,CAAC,OAAQ,OAE9B,OACI,cAAC,IAAD,CACIC,UAAY,MACZC,OAAS,CAACF,EAAa,GAAIA,EAAa,IACxCG,KAAO,EAHX,SAKI,cAACC,EAAA,EAAD,CACAC,YAAY,0EACZC,IAAI,0D,wLCZVC,EAAYC,EAAQ,KACpBC,EAAQD,EAAQ,KAOhBE,EAJc,CAClB,4BACA,iCAE0BC,QAAO,SAACC,EAAKC,GAGvC,YADuBC,IAAnBC,gKAAYF,KAAkBD,EAAIC,EAAEG,MAAM,KAAOD,gKAAYF,IAC1DD,IACN,IAGYK,EADH,mDAAQC,GAAiBX,GAAcG,GAAvC,IAAgDD,UCJtDU,EADcC,IAAYC,MAAMC,OAAOC,SAASC,QAClBC,KAAOR,EAAOS,gBAClDC,QAAQC,IAAR,4BAAiCT,IAKjC,IAAMU,EAAa,CACjBC,OAAQX,EACRY,QAAQ,2BAAMA,WAAYd,EAAOe,KACjCvB,MAAOQ,EAAOR,MACdwB,QAAS,KACTC,aAAc,KACdC,IAAK,KACLC,SAAU,KACVC,SAAU,MAMNC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBF,SAAU,iBAE/B,IAAK,UACH,OAAO,2BAAKE,GAAZ,IAAmBJ,IAAKK,EAAOE,QAASL,SAAU,eAEpD,IAAK,kBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,UAE/B,IAAK,gBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,QAASD,SAAUI,EAAOE,UAEzD,IAAK,eACH,OAAO,2BAAKH,GAAZ,IAAmBL,aAAc,YAEnC,IAAK,cACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAASO,EAAOE,QAASR,aAAc,UAE5D,IAAK,gBACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAAS,KAAMC,aAAc,UAElD,QACE,MAAM,IAAIS,MAAJ,wBAA2BH,EAAOC,SA8B1CG,GAAY,EA4BVC,EAAmBC,IAAMC,gBAEzBC,EAA2B,SAACC,GAEhC,IAAMC,EAAS,eAAQrB,GACC,CAAC,SAAU,SACnBsB,SAAQ,SAAAC,GACtBF,EAAUE,GAA8B,qBAAfH,EAAMG,GAAuBF,EAAUE,GAAOH,EAAMG,MALrC,MAQhBC,qBAAWf,EAASY,GARJ,mBAQnCX,EARmC,KAQ5Be,EAR4B,KAY1C,OAjEc,SAACf,EAAOe,GAAc,IAC5BjB,EAAqCE,EAArCF,SAAUP,EAA2BS,EAA3BT,OAAQC,EAAmBQ,EAAnBR,QAAStB,EAAU8B,EAAV9B,MAEnC,IAAI4B,EAAJ,CAEAiB,EAAS,CAAEb,KAAM,iBAEjB,IAAMc,EAAW,IAAIC,aAAW1B,GAC1B2B,EAAO,IAAIC,aAAW,CAAEH,WAAU9C,QAAOgB,IAAKM,IAGpD0B,EAAKE,GAAG,aAAa,WACnBL,EAAS,CAAEb,KAAM,UAAWC,QAASe,IAErCA,EAAKG,QAAQC,MAAK,SAACJ,GAAD,OAAUH,EAAS,CAAEb,KAAM,0BAE/CgB,EAAKE,GAAG,SAAS,kBAAML,EAAS,CAAEb,KAAM,uBACxCgB,EAAKE,GAAG,SAAS,SAAAG,GAAG,OAAIR,EAAS,CAAEb,KAAM,gBAAiBC,QAASoB,QA6CnEC,CAAQxB,EAAOe,GAtCI,SAACf,EAAOe,GAC3B,IAAMU,EAAiB,uCAAG,4BAAAC,EAAA,6DACxBX,EAAS,CAAEb,KAAM,iBADO,kBAGhByB,qBAAWjD,EAAOkD,UAHF,uBAIEC,yBAJF,OAKtBC,GADIA,EAJkB,QAKIC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,MAC3B,CAAED,UAASC,KAAK,2BAAMA,GAAP,IAAaC,KAAK,GAAD,OAAKD,EAAKC,KAAV,aAAmBD,EAAKE,OAAxB,WACnCzC,IAAQ0C,QAAQ,CAAEC,cAAe3D,EAAO4D,qBAAuBR,GAC/Df,EAAS,CAAEb,KAAM,cAAeC,QAAST,MARnB,kDAUtBN,QAAQmD,MAAR,MACAxB,EAAS,CAAEb,KAAM,kBAXK,0DAAH,qDAiBvB,IAFyBF,EAAjBL,aAER,CAEA,GAAIU,EAAW,OAAOU,EAAS,CAAEb,KAAM,cAAeC,QAAST,MAG/DW,GAAY,EACZoB,KAeAe,CAAaxC,EAAOe,GAEb,cAACT,EAAiBmC,SAAlB,CAA2BC,MAAO1C,EAAlC,SACJU,EAAMiC,YAULC,EAAe,iCAAYC,qBAAWvC,KChI7BwC,EAXD,CACZC,gBAAiB,CACfC,IAAK,CACH,mBACA,YACA,KAAM,MAAO,MAAO,MAAO,OAC3B,KAAM,MAAO,MAAO,MAAO,U,iBCEjC,SAASC,EAAT,GAUI,IAAD,IATDC,mBASC,MATa,KASb,EARDC,EAQC,EARDA,MACAC,EAOC,EAPDA,UACAC,EAMC,EANDA,YAMC,IALDC,aAKC,MALO,OAKP,MAJDC,aAIC,MAJO,KAIP,MAHDrD,YAGC,MAHM,QAGN,MAFDsD,aAEC,MAFO,KAEP,MADDC,gBACC,SAEO7D,EAAQgD,IAARhD,IAFP,EAGyB8D,mBAAS,MAHlC,mBAGMC,EAHN,KAGaC,EAHb,OAI6BF,mBAAS,MAJtC,mBAIMG,EAJN,KAIeC,EAJf,KAMOC,EAAkDP,EAAlDO,UAAWC,EAAuCR,EAAvCQ,SAAUC,EAA6BT,EAA7BS,YAAaC,EAAgBV,EAAhBU,YAGpCC,EAAS,iBAAe,YAATjE,GACfkE,EAAkB,iBAAe,sBAATlE,GAc9BmE,qBARoB,WAClB,sBAAC,4BAAA3C,EAAA,yDACM9B,GAAQA,EAAI0E,MAAMC,KADxB,iEAEuB3E,EAAI0E,MAAMC,KAAK1D,MAFtC,QAEOgD,EAFP,QAGSW,QAAUV,EAAW,MAAQA,EAAWD,EAAQY,YAHzD,0CAAD,KAOqB,CAAC7E,IAExB,IA6LiB8E,EA7LXC,EAAW,uCAAG,oCAAAjD,EAAA,yDAEhBM,EAEEkB,EAFFlB,QAFgB,EAIdkB,EADFjB,KAAQE,EAHQ,EAGRA,QAHQ,EAGAyC,WAHA,gCASOC,yBAAe1C,GATtB,OASV2C,EATU,OAUhBC,EAAW/C,EACXpC,EAAIoF,UAAUF,EAASG,QAXP,uBAahBF,EAAW7B,EAbK,iCAgBX6B,GAhBW,4CAAH,qDAmBXG,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACnBA,EAAOC,YACHhC,EAAU,uCAAD,OAA8B+B,EAAOE,YAAYZ,aAC1DrB,EAAU,+BAAD,OAAgC+B,EAAOjF,QAEhDoF,EAAe,SAAA/D,GAAG,OACtB6B,EAAU,oCAAD,OAA2B7B,EAAIkD,cAEpCc,EAAM,uCAAG,oCAAA7D,EAAA,sEACUiD,IADV,OACPI,EADO,OAEPS,EAAcC,GAAgBvB,EAAaD,GAE3CyB,EAAYF,EACd5F,EAAI+F,GAAGpB,KAAKA,MAAK,EAAA3E,EAAI+F,GAAG5B,IAAWC,GAAlB,oBAA+BwB,KAChD5F,EAAI+F,GAAGpB,KAAKA,KAAK3E,EAAI+F,GAAG5B,GAAWC,MAEjCL,EAAQ+B,EAAUE,YAAYb,EAAUG,GAC3CW,MAAMP,GACT1B,GAAS,kBAAMD,KAVF,2CAAH,qDAaNmC,EAAe,uCAAG,kCAAApE,EAAA,sEACCiD,IADD,OAChBI,EADgB,OAEhBW,EACF9F,EAAI+F,GAAGpB,KAAKwB,qBAAoB,EAAAnG,EAAI+F,GAAG5B,IAAWC,GAAlB,oBAA+BC,IAAc,GAE3EN,EAAQ+B,EAAUE,YAAYb,EAAUG,GAC3CW,MAAMP,GACT1B,GAAS,kBAAMD,KAPO,2CAAH,qDAUfqC,EAAQ,uCAAG,oCAAAtE,EAAA,sEACQiD,IADR,cACTI,EADS,OAETS,EAAcC,GAAgBvB,EAAaD,GAEjD7E,QAAQC,IAAImG,GACNE,EAAYF,GACd,EAAA5F,EAAI+F,GAAG5B,IAAWC,GAAlB,oBAA+BwB,IAC/B5F,EAAI+F,GAAG5B,GAAWC,KAPP,SASK0B,EAAUE,YAAYb,EAAUG,GACjDW,MAAMP,GAVM,OAST3B,EATS,OAWfC,GAAS,kBAAMD,KAXA,4CAAH,qDAcRsC,EAAU,uCAAG,kCAAAvE,EAAA,6DACX8D,EAAcC,GAAgBvB,EAAaD,GAE3CyB,EAAYF,GACd,EAAA5F,EAAI+F,GAAG5B,IAAWC,GAAlB,oBAA+BwB,IAC/B5F,EAAI+F,GAAG5B,GAAWC,KALL,SAOG0B,EAAUQ,KAAKhB,GAChCW,MAAMP,GARQ,OAOX3B,EAPW,OASjBC,GAAS,kBAAMD,KATE,2CAAH,qDAYVwC,EAAkB,SAAAC,GAAM,OAC5BA,EAAOC,OAASjD,EAAU,QAAUA,EAAUgD,EAAO3B,aAEjDH,EAAK,uCAAG,gCAAA5C,EAAA,6DACN8D,EAAcC,GAAgBvB,EAAaD,GADrC,UAEQ,EAAArE,EAAI0E,MAAMP,IAAWC,GAArB,oBAAkCwB,GAAlC,QAA+CW,KAFvD,OAENxC,EAFM,OAGZC,GAAS,kBAAMD,KAHH,2CAAH,qDAMLzE,EAAG,uCAAG,gCAAAwC,EAAA,6DACJ8D,EAAcC,GAAgBvB,EAAaD,EAAa,CAAEqC,aAAa,IADnE,UAEU,EAAA1G,EAAIV,IAAI6E,IAAWC,GAAnB,oBAAgCwB,GAAhC,QAA6CW,KAFvD,OAEJxC,EAFI,OAGVC,GAAS,kBAAMD,KAHL,2CAAH,qDAMH4C,EAAW,WACf,IAAMH,EAASxG,EAAI4G,OAAOzC,GAAWC,GACrCoC,EAAOC,OAASjD,EAAU,QAAUA,EAAUgD,EAAO3B,aAGjDgC,GAAW,uCAAG,sBAAA/E,EAAA,yDACdiC,IACFA,IACAC,EAAS,OAGXR,EAAU,eAENe,IARc,uBAShB/E,QAAQC,IAAI,UATI,SAUVkG,IAVU,kCAWPnB,IAXO,wBAYhBhF,QAAQC,IAAI,mBAZI,UAaVyG,IAbU,mCA9GY,cAAT5F,EA8GH,wBAehBd,QAAQC,IAAI,YAfI,UAgBV2G,IAhBU,mCA/Gc,gBAAT9F,EA+GL,wBAkBhBd,QAAQC,IAAI,cAlBI,UAmBV4G,IAnBU,mCAlHW,UAAT/F,EAkHF,wBAqBhBd,QAAQC,IAAI,WArBI,UAsBViF,IAtBU,mCA7GS,QAATpE,EA6GA,wBAwBhBd,QAAQC,IAAI,SAxBI,UAyBVH,IAzBU,mCA5Gc,aAATgB,EA4GL,wBA2BhBd,QAAQC,IAAI,cA3BI,UA4BVkH,IA5BU,QA+BS,oBAAhBlD,GAA4BA,IA/BrB,4CAAH,qDAkCXoC,GAAkB,SAACvB,EAAaD,GAA+C,IAAlCyC,EAAiC,uDAA1B,CAAEJ,aAAa,GAGjEK,EAAW1C,EAAYlC,KAAI,SAAA6E,GAE/B,MAA0B,kBAAfA,GAA0C,OAAfA,GAAmD,kBAArBA,EAAWlE,MACtEkE,EAAWlE,MAAMmE,OACO,kBAAfD,EACTA,EAAWC,OACTD,GAAcA,EAAWlE,iBAAiBoE,OAAOC,eAAeC,YAClEJ,EAAWlE,MAEbkE,KAEHK,EAAS/C,EAAYnC,KAAI,SAACmF,EAAOC,GAAR,mBAAC,eAAqBD,GAAtB,IAA6BxE,MAAOiE,EAASQ,IAAQ,UAEpF,OAAOF,EAAO7I,QAAO,SAACgJ,EAAD,GAAuC,IAAD,IAA7BlH,YAA6B,MAAtB,SAAsB,EAAZwC,EAAY,EAAZA,MAC7C,GAAa,MAATA,GAA2B,KAAVA,EAAc,OAAQgE,EAAKJ,YAAL,sBAAuBc,GAAvB,CAA6B,OAAQA,EAEhF,IAAIC,EAAY3E,EAGhB,OAAIxC,EAAKoH,QAAQ,SAAW,GAE1BD,GADAA,EAAYA,EAAUE,MAAM,KAAKxF,KAAI,SAAAyF,GAAC,OAAIA,EAAEX,WACtB9E,KAAI,SAAA0F,GAAM,OAAIC,GAAUxH,GACzCuH,EAAOH,QAAQ,MAAQ,EAAIK,OAAOC,WAAWH,GAAUE,OAAOE,SAASJ,GACxEA,KAEE,GAAN,mBAAWL,GAAX,CAAiBC,MAIfK,GAAUxH,KACZmH,EAAYA,EAAUC,QAAQ,MAAQ,EAAIK,OAAOC,WAAWP,GAAaM,OAAOE,SAASR,IAErF,GAAN,mBAAWD,GAAX,CAAiBC,OAChB,KAGCK,GAAY,SAAAxH,GAGhB,MAAa,YAATA,GACG4C,EAAMC,gBAAgBC,IAAI8E,MAAK,SAAAC,GAAE,OAAI7H,EAAKoH,QAAQS,IAAO,MAqBlE,OACE,cAACC,EAAA,EAAD,CACEC,OAAK,EACL3E,MAAOA,EACPC,MAAOA,EACPrD,KAAK,SACLgI,QAASzB,GACThD,SAAWA,IAAaM,IAAcC,KAxBb,IAAvBE,EAAYiE,QAETjE,EAAYkE,OAAM,SAACC,EAAYlB,GACpC,IAAMmB,EAAQrE,EAAYkD,GAC1B,GAAIkB,EAAWE,SAAY,OAAO,EAClC,GAAa,MAATD,EAAiB,OAAO,EAE5B,IAAM5F,EAAyB,kBAAV4F,EAAqBA,EAAM5F,MAAQ4F,EACxD,OAAiB,OAAV5F,GAA4B,KAAVA,QAiBrByB,KAAYC,OAbHM,EAamCxB,IAZ7CW,GAAYa,GACVA,EAAS1C,UAAY6B,IAI5B,SASGV,ICrPQ,SAASqF,EAAkB9H,GAAQ,IAAD,EACEkC,IAAzChD,EADuC,EACvCA,IAAKE,EADkC,EAClCA,SAAUJ,EADwB,EACxBA,QAASC,EADe,EACfA,aAMhC,MALiB,UAAbG,IAAwBf,OAAOa,IAAMA,GACpB,UAAjBD,IAA4BZ,OAAOW,QAAUA,GACjDX,OAAO0J,KAAOxK,EAAQ,GACtBc,OAAO2J,WAAazK,EAAQ,IAErB,K,0DCKT,SAAS0K,EAAMjI,GAAQ,IACbhB,EAAYkD,IAAZlD,QACAkJ,EAAsBlI,EAAtBkI,kBAFY,EAG0BlF,mBAAS,IAHnC,mBAGbmF,EAHa,KAGIC,EAHJ,KAMdC,EAAiBrJ,EAAQsJ,WAAWjH,KAAI,SAAAkH,GAAO,MAAK,CACxDpI,IAAKoI,EAAQjH,QACbU,MAAOuG,EAAQjH,QACfkH,KAAMD,EAAQhH,KAAKC,KAAKiH,cACxBC,KAAM,WAGFC,EACJN,EAAeZ,OAAS,EAAIY,EAAe,GAAGrG,MAAQ,GAGxD2B,qBAAU,WACRuE,EAAkBS,GAClBP,EAAmBO,KAClB,CAACT,EAAmBS,IASvB,OACE,cAACC,EAAA,EAAD,CACEC,SAAS,MACTC,SAAO,EACPjG,MAAO,CACLkG,gBAAiB,UACjBC,YAAa,UACbC,WAAY,QACZC,cAAe,SAPnB,SAUE,eAACC,EAAA,EAAD,WACE,cAACP,EAAA,EAAKA,KAAN,UACE,mBACEQ,OAAO,SACPC,IAAI,sBACJC,KAAK,yBAHP,SAME,cAACC,EAAA,EAAD,CAAOC,IAAG,UAAK1L,gCAAL,iDAA4E2L,KAAK,eAI/F,eAACb,EAAA,EAAKA,KAAN,CAAWc,SAAS,QAAQ7G,MAAO,CAAE8G,WAAY,UAAjD,UACKxB,EAWC,KAVA,6DAC0B,IAC1B,mBACEiB,OAAO,SACPC,IAAI,sBACJC,KAAK,2CAHP,sCASJ,cAAC,kBAAD,CAAiBd,KAAML,EAAvB,SACE,cAACb,EAAA,EAAD,CACEC,OAAK,EACLqC,UAAQ,EACRH,KAAK,QACLf,KAAK,OACL9F,MAAOuF,EAAkB,QAAU,UAGvC,cAAC0B,EAAA,EAAD,CACEtL,QAAM,EACNuL,WAAS,EACTC,WAAS,EACTC,YAAY,oBACZC,QAAS5B,EACT6B,SAAU,SAACC,EAAGC,GAzDP,IAAA9I,IA0DI8I,EAASpI,MAxD5BkG,EAAkB5G,GAClB8G,EAAmB9G,IAyDXU,MAAOmG,YAuCJ,SAASkC,EAAiBrK,GAAQ,IAAD,EACrBkC,IAAjBhD,EADsC,EACtCA,IACR,OAF8C,EACjCF,QACEsJ,UAAYpJ,EAAI0E,MAAQ,cAACqE,EAAD,eAAUjI,IAAY,K,uBCtI/D,SAASiI,GAAMjI,GAAQ,IACbd,EAAQgD,IAARhD,IACAoL,EAActK,EAAdsK,UAFY,EAGkBtH,mBAAS,GAH3B,mBAGbuH,EAHa,KAGAC,EAHA,OAI4BxH,mBAAS,GAJrC,mBAIbyH,EAJa,KAIKC,EAJL,KAMdC,EAAaL,EACfpL,EAAI0L,OAAOC,MAAMC,oBACjB5L,EAAI0L,OAAOC,MAAMF,WAErBhH,qBAAU,WACR,IAAIoH,EAAiB,KAWrB,OATAJ,GAAW,SAAAK,GACTR,EAAeQ,EAAOC,YACtBP,EAAoB,MAEnB9J,MAAK,SAAAqC,GACJ8H,EAAiB9H,KAElBkC,MAAMzG,QAAQmD,OAEV,kBAAMkJ,GAAkBA,OAC9B,CAACJ,IAEJ,IAAMO,EAAQ,WACZR,GAAoB,SAAAS,GAAI,OAAIA,EAAO,MAQrC,OALAxH,qBAAU,WACR,IAAMyH,EAAKC,YAAYH,EAAO,KAC9B,OAAO,kBAAMI,cAAcF,MAC1B,IAGD,cAACG,EAAA,EAAKC,OAAN,UACE,sBAAK3I,MAAO,CAAC4I,QAAS,UAAtB,UACE,6BAAKnB,EAAY,YAAc,WAAa,UAAYC,EAAc,OACtE,cAACmB,EAAA,EAAD,CAAMlK,KAAK,SAFb,IAEwBiJ,OAMf,SAASkB,GAAa3L,GAAQ,IACnCd,EAAQgD,IAARhD,IACR,OAAOA,EAAI0L,QACT1L,EAAI0L,OAAOC,OACX3L,EAAI0L,OAAOC,MAAMF,YACjBzL,EAAI0L,OAAOC,MAAMC,oBACf,cAAC,GAAD,eAAU9K,IACV,K,cClDA4L,GAAkB,CACtB,yDACA,0DAGF,SAAS3D,GAAMjI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEc8D,mBAAS,IAFvB,mBAEb6I,EAFa,KAEFC,EAFE,KAIpBnI,qBAAU,WACR,IAAIV,EAAQ,KAgCZ,OA/Be,uCAAG,sBAAAjC,EAAA,sEACF9B,EAAI0E,MAAMmI,OAAOC,QAAO,SAAAA,GAEpCA,EAAO9L,SAAQ,SAAA+L,GAAU,IAEfC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MACT3O,EAAQ0O,EAAME,QAGdC,EAAS,UAAMH,EAAMI,QAAZ,YACbJ,EAAMK,OADO,qBAEFJ,EAAMpI,WAFJ,KAIf,IAAI6H,GAAgBY,SAASH,GAA7B,CAGA,IAAM9F,EAAS2F,EAAMO,KAAKpL,KACxB,SAACoL,EAAMC,GAAP,gBAAoBlP,EAAMkP,GAAOlN,KAAjC,aAA0CiN,EAAK1I,eAGjD+H,GAAa,SAAAhF,GAAC,OAAK,CACjB4B,KAAM,OACNiE,QAAQ,GAAD,OAAKN,EAAL,YAAkBvF,EAAEW,QAC3BmF,UAAWV,EAAM3K,KAAKsL,cAAcC,KAAK,MAAM/I,WAC/CgJ,QAASxG,EAAOuG,KAAK,QAJT,mBAKRhG,cAzBM,OAChB7D,EADgB,kDAAH,oDA8Bf+J,GACO,kBAAM/J,GAASA,OACrB,CAAC/D,EAAI0E,MAAMmI,SAtCM,MAwCY/L,EAAxBiN,qBAxCY,MAwCI,IAxCJ,EA0CpB,OACE,eAAC1B,EAAA,EAAKC,OAAN,CAAa0B,MAAO,EAApB,UACE,oBAAIrK,MAAO,CAAEsK,MAAO,QAApB,oBACA,cAAC7F,EAAA,EAAD,CACEC,OAAK,EAACqC,UAAQ,EACdH,KAAK,OACL7G,MAAM,OACNwK,QAAQ,QACR1E,KAAK,QACLlB,QAAU,SAAA2C,GAAC,OAAI2B,EAAa,OAE9B,cAACuB,GAAA,EAAD,CAAMxK,MAAO,CAAEyK,MAAO,OAAQC,SAAU,OAAQC,UAAWP,GAAiBjB,OAAQH,OAK3E,SAAS4B,GAAQzN,GAAQ,IAC9Bd,EAAQgD,IAARhD,IACR,OAAOA,EAAI0E,OAAS1E,EAAI0E,MAAMmI,QAAU7M,EAAI0E,MAAMmI,OAAOC,OACrD,cAAC,GAAD,eAAUhM,IACV,K,sCCpEN,SAASiI,GAAMjI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEY8D,mBAAS,CAAEyJ,KAAM,KAAMiB,QAAS,OAF5C,mBAEbC,EAFa,KAEHC,EAFG,KAgBpB,OAZAjK,qBAAU,YACS,uCAAG,4BAAA3C,EAAA,+EAEG9B,EAAIV,IAAIc,MAAMuO,cAFjB,OAEVpB,EAFU,OAGhBmB,EAAY,CAAEnB,OAAMiB,QAASjB,EAAKiB,UAHlB,gDAKhBhP,QAAQmD,MAAR,MALgB,yDAAH,qDAQjBgM,KACC,CAAC3O,EAAIV,IAAIc,QAGV,cAACiM,EAAA,EAAKC,OAAN,UACE,sBAAK3I,MAAO,CAAC4I,QAAS,UAAtB,UACE,2CAAkB,IAAMkC,EAASD,QAAU,IAC3C,eAACI,GAAA,EAAD,CAAOC,QAAS,cAACzG,EAAA,EAAD,CAAQ0G,SAAO,EAAEpE,UAAQ,EAAClB,KAAK,WAAWe,KAAK,SAA/D,UACE,cAACqE,GAAA,EAAMG,OAAP,+BACA,cAACH,GAAA,EAAMI,QAAP,CAAeC,WAAS,EAAxB,SACE,cAACL,GAAA,EAAMM,YAAP,UACE,8BACE,+BAAOC,KAAKC,UAAUX,EAASlB,KAAM,KAAM,mBAU5C,SAAS8B,GAAUvO,GAAQ,IAChCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIV,KAAOU,EAAIV,IAAIc,OAASJ,EAAIV,IAAIc,MAAMuO,YAC7C,cAAC,GAAD,eAAU7N,IACV,KCvCN,SAASiI,GAAMjI,GAAQ,IAAD,EACIkC,IAAhBhD,EADY,EACZA,IADY,KACPL,OACmBmE,mBAAS,KAFrB,mBAEbwL,EAFa,KAEHC,EAFG,KAoBpB,OAhBA9K,qBAAU,YACK,uCAAG,oCAAA3C,EAAA,+EAEiC0N,QAAQC,IAAI,CACvDzP,EAAIV,IAAIuN,OAAOlB,QACf3L,EAAIV,IAAIuN,OAAOvK,OACftC,EAAIV,IAAIuN,OAAO2B,YALL,mCAEL7C,EAFK,KAEE+D,EAFF,KAEYC,EAFZ,KAOZJ,EAAY,CAAE5D,QAAO+D,WAAUC,gBAPnB,kDASZnQ,QAAQmD,MAAR,MATY,0DAAH,qDAYbiN,KACC,CAAC5P,EAAIV,IAAIuN,SAGV,cAACR,EAAA,EAAKC,OAAN,UACE,sBAAK3I,MAAO,CAAC4I,QAAS,UAAtB,UACE,cAACC,EAAA,EAAD,CAAMlK,KAAK,YADb,IAC2BgN,EAASK,iBAM3B,SAASE,GAAU/O,GAAQ,IAChCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIV,KACTU,EAAIV,IAAIuN,QACR7M,EAAIV,IAAIuN,OAAOlB,OACf3L,EAAIV,IAAIuN,OAAOvK,MACftC,EAAIV,IAAIuN,OAAO2B,QACb,cAAC,GAAD,eAAU1N,IACV,K,cCzCC,SAASgP,GAAehN,GAG7B,IAFA,IAAIiN,EAAM,GAEDC,EAAI,EAAGA,EAAIlN,EAAMyF,OAAQyH,IAAK,CAErCD,GAAQ,IADKjN,EAAMkN,GAKrB,IADA,IAAIC,EAAQ,GACHD,EAAI,EAAGA,EAAI,GAAKD,EAAIxH,OAAQyH,IACnCC,GAAS,IAIX,OADAA,GAASF,EAIJ,SAASG,GAAUpN,EAAOqN,QACjB,IAAVrN,GAA8B,OAAVA,IAAgBA,EAAQ,IAGhD,IADA,IAAMsN,EAAY,IAAIhJ,WAAWtE,EAAMyF,QAC9ByH,EAAI,EAAGA,EAAII,EAAU7H,OAAQyH,IACpCI,EAAUJ,GAAKlN,EAAMuN,WAAWL,GASlC,IAPA,IAAMM,EAASC,OAAOC,aAAP,MAAAD,OAAM,YAAiB,IAAInJ,WAAWgJ,EAAUK,UAIzDC,EAAU,GADJJ,EAAO/H,OAEfoI,EAAQ,IAAIvJ,WAAW,IAElB4I,EAAI,EAAGA,EAAI,GAAIA,IACtB,KAAIA,EAAIU,GAAR,CACA,IAAME,GAAqB,GAAhBF,EAAUV,GACrBW,EAAMX,GAAKM,EAAOD,WAAWO,GAG/B,GAAIT,EAAQ,CAEV,IACIU,EAAY,IAAIzJ,WAAW,IAC/ByJ,EAAU,GAAK,EACf,IAAK,IAAIb,EAAI,EAAGA,EAAI,GAAIA,IACtBa,EAAUb,EAAI,GAAKW,EAAMX,GAG3B,OAAOa,EAET,OAAOF,EAGF,SAASG,GAAUhO,QACV,IAAVA,IAAkBA,EAAQ,IAM9B,IAJA,IAAIiO,EAAa,GAGbC,GAAa,EACRhB,EAAI,EAAGA,EAAIlN,EAAMyF,OAAQyH,IAAK,CACrC,IAAMiB,EAAOnO,EAAMkN,GACnB,GAAIgB,EAAY,CACd,GAAa,MAATC,EAAc,SAClBD,GAAa,EAEfD,GAAcE,EAIhB,IADA,IAAMC,EAAQ,GACLlB,EAAI,EAAGA,EAAIe,EAAWxI,OAAQyH,GAAK,EAC1CkB,EAAMC,KAAK,CAACJ,EAAWf,GAAIe,EAAWf,EAAI,KAI5C,IADA,IAAID,EAAM,GACDC,EAAI,EAAGA,EAAIkB,EAAM3I,OAAQyH,IAAK,CAErCD,GADgBmB,EAAMlB,GACP,GAEjB,OAAOD,ECxEM,SAAShH,GAAMjI,GAAQ,IAAD,EACPgD,mBAAS,MADF,mBAC5ByB,EAD4B,KACpB/B,EADoB,OAEDM,mBAAS,CAAEsN,YAAa,KAAMC,UAAW,KAAMC,OAAQ,IAFtD,mBAE5BC,EAF4B,KAEjBC,EAFiB,KAG3BlO,EAAgBxC,EAAhBwC,YAEF0H,EAAW,SAACC,EAAGsC,GACnBiE,GAAa,SAAAC,GAAI,kCAAUA,GAAV,mBAAiBlE,EAAKnN,MAAQmN,EAAKzK,WACpD4O,EAAsBxB,GAAUkB,GAAa,IAC7CO,EAAoBzB,GAAUmB,GAAW,KARR,EAWiBvN,mBAAS,IAX1B,mBAW5B8N,EAX4B,KAWRF,EAXQ,OAYa5N,mBAAS,IAZtB,mBAY5B+N,EAZ4B,KAYVF,EAZU,KAc3BP,EAAmCG,EAAnCH,YAAaC,EAAsBE,EAAtBF,UAAWC,EAAWC,EAAXD,OAEhC,OACE,eAACjF,EAAA,EAAKC,OAAN,CAAa0B,MAAO,EAApB,UACE,gDACA,eAAC8D,GAAA,EAAD,WACE,cAACA,GAAA,EAAKC,MAAN,UACE,cAACC,GAAA,EAAD,CACEC,OAAK,EACL1O,MAAM,OACNjD,KAAK,OACLwK,YAAY,UACZ1K,MAAM,cACN4K,SAAUA,MAGd,cAAC8G,GAAA,EAAKC,MAAN,UACE,cAACC,GAAA,EAAD,CACEC,OAAK,EACL1O,MAAM,KACNjD,KAAK,OACLwK,YAAY,UACZ1K,MAAM,YACN4K,SAAUA,MAGd,cAAC8G,GAAA,EAAKC,MAAN,UACE,cAACC,GAAA,EAAD,CACEC,OAAK,EACL1O,MAAM,SACNjD,KAAK,SACLF,MAAM,SACN4K,SAAUA,MAGd,cAAC8G,GAAA,EAAKC,MAAN,CAAYpO,MAAO,CAAEuO,UAAW,UAAhC,SACE,cAAC7O,EAAD,CACEC,YAAaA,EACbC,MAAM,SACNjD,KAAK,YACLkD,UAAWA,EACXI,MAAO,CACLO,UAAW,YACXC,SAAU,cACVC,YAAa,CACX,IACA,CAAC/D,KAAM,SAAUwC,MAAO8O,GACxB,CAACtR,KAAM,SAAUwC,MAAO+O,GACxBP,GAEFa,WAAY,YACZ7N,YAAa,CACX,CAAChC,KAAM,UAAWhC,KAAM,WACxB,CAACgC,KAAM,UAAWhC,KAAM,UACxB,CAACgC,KAAM,QAAShC,KAAM,UACtB,CAACgC,KAAM,MAAOhC,KAAM,kBAK5B,qBAAKqD,MAAO,CAAEyO,aAAc,cAA5B,SAA6C7M,UChF9C,I,UCKD8M,GAAkB,CACtB,CAAC/R,KAAM,YAAawC,MAAO,OAC3B,CAACxC,KAAM,cAAewC,MAAO,KAC7B,CAACxC,KAAM,MAAOwC,MAAO,KACrB,CAACxC,KAAM,UAAWwC,MAAO,KAG3B,SAASiG,GAAMjI,GACb,IAAMwR,EAAUxR,EAAMwR,QADF,EAGQxO,mBAAS,MAHjB,mBAGLN,GAHK,aAIIM,oBAAS,GAJb,mBAIbyO,EAJa,KAIPC,EAJO,OAMkB1O,mBAAS,GAAD,OAAKuO,KAN/B,mBAMbhO,EANa,KAMAoO,EANA,KAqBpB,OATAhO,qBAAU,WACR,GAAK6N,EAAL,CAEA,IAAMjO,EAAW,UAAOgO,IAClBK,EAAMJ,EAAQvC,KAAOuC,EAAQvC,IAAIlL,WACvCR,EAAY,GAAGvB,MAAQ4P,GAAOxC,GAAUwC,GACxCD,EAAepO,MACd,CAACiO,IAGF,iCACKA,GAAWA,EAAQvC,IACpB,cAAC1M,EAAD,aACAE,MAAM,YACNjD,KAAK,YACLoD,MAAM,OACNF,UAAWA,EACXC,YArBmB,WACvB+O,GAAQ,IAqBJ5O,MAAO,CACLO,UAAW,UACXC,SAAU,mBACVC,YAAaA,EACb8N,WAAY,YACZ7N,YAAa,CACX,CAAChC,KAAM,aAAchC,KAAM,YAAaqI,UAAU,GAClD,CAACrG,KAAM,QAAShC,KAAM,cAAeqI,UAAU,GAC/C,CAACrG,KAAM,QAAShC,KAAM,KAAMqI,UAAU,GACtC,CAACrG,KAAM,YAAahC,KAAM,UAAWqI,UAAU,MAG/C7H,IAEJ,KAEF,eAAC8N,GAAA,EAAD,CACE+D,QAAS,kBAAMH,GAAQ,IACvBD,KAAMA,EAFR,UAIE,cAAC3D,GAAA,EAAMG,OAAP,mCACA,cAACH,GAAA,EAAMgE,QAAP,UACE,cAACxK,EAAA,EAAD,CACEyF,QAAQ,KACRgF,cAAc,QACdrJ,KAAK,YACLlB,QAAS,kBAAMkK,GAAQ,IACvBM,UAAQ,YAQL,SAASC,GAAcjS,GACpC,OACE,cAAC,GAAD,eAAUA,ICzEd,SAASiI,GAAMjI,GAAQ,IACXd,EAAQgD,IAARhD,IADU,EAEI8D,mBAAS,IAFb,mBAEXiM,EAFW,KAENiD,EAFM,OAGYlP,mBAAS,IAHrB,mBAGXwO,EAHW,KAGFW,EAHE,KAKZC,EAAY,uCAAG,4CAAApR,EAAA,sEAGAqR,MAAM,QAAUpD,GAHhB,cAGbqD,EAHa,gBAICA,EAAKC,OAJN,cAIbC,EAJa,gBAMDH,MAAM,aAAepD,GANpB,cAMbwD,EANa,iBAOAA,EAAIF,OAPJ,WAOb9F,EAPa,SASfgG,EAAIC,IAAMjG,GACR6F,EAAKI,IAAMF,GAVE,wBAaXG,EAAS,KAAO3D,GAAevC,EAAK,GAAGwC,KAb5B,oBAiBO/P,EAAI0E,MAAMgP,QAAQC,OAAOF,GAjBhC,eAiBTG,EAjBS,OAkBfpU,QAAQC,IAAImU,EAAQC,WAlBL,UAmBW7T,EAAI0E,MAAMgP,QAAQI,QAAQF,EAAQC,WAnB7C,QAmBTE,EAnBS,OAoBTC,EAAeD,EAAY,IAAMA,EAAY,GAAGF,UACtDI,EAAaD,GAAgBA,EAAa,IAAMA,EAAa,GAAGE,SArBjD,mDAyBf1U,QAAQC,IAAR,MAzBe,QA4BbwU,IAAenT,EAAMqT,iBAAgB5G,EAAK6G,OAAQ,GAEtDnB,EAAW1F,EAAK,IAEc,oBAAnBzM,EAAMuT,UACfvT,EAAMuT,SAAS9G,GAjCA,wBAoCjB+G,MAAM,sBApCW,2DAAH,qDA4ClB,OACE,cAACjI,EAAA,EAAKkI,IAAN,CAAUvG,MAAO,EAAjB,SACE,eAAC3B,EAAA,EAAKC,OAAN,CAAa0B,MAAO,EAApB,UACE,4CACA,cAAC8D,GAAA,EAAD,CAAM0C,SAAUtB,EAAhB,SACE,eAACpB,GAAA,EAAKC,MAAN,WACE,cAACC,GAAA,EAAD,CACElH,YAAY,+BACZmH,OAAK,EACL3R,KAAK,OACLqD,MAAO,CAACqG,cAAe,QACvB5J,MAAQ2P,EACRjN,MAAQiN,EACR/E,SAjBM,SAAUyJ,EAAIlH,GAC9ByF,EAAOzF,EAAKzK,UAkBJ,eAACuJ,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa4B,QAAQ,OAAOF,MAAO,EAAnC,SACE,cAAC5F,EAAA,EAAD,CAAQ9H,KAAK,SAASqD,MAAO,CAACqK,MAAO,QAArC,sBAEF,cAAC3B,EAAA,EAAKC,OAAN,CAAa4B,QAAQ,QAAQF,MAAO,EAApC,SACE,cAAC+E,GAAD,aAAcpP,MAAO,CAACqK,MAAO,QAAqBsE,QAAUA,GAAcxR,GAA9BiP,kBAU/C,SAAS2E,GAAW5T,GACjC,OACE,cAAC,GAAD,eAAUA,ICnFd,SAASiI,GAAKjI,GACZ,IAAM6T,EAAY,SAAUpP,GAC1B,IAAMqP,EAASrP,EAAOqP,OAEtB9T,EAAM+T,aL8FH,SAAmBD,GAMxB,IALA,IAAIE,GAAU,EAAI/M,OAAOgN,UACrBC,EAASjN,OAAOgN,UAChBE,GAAU,EAAIlN,OAAOgN,UACrBG,EAASnN,OAAOgN,UAEXnE,EAAI,EAAGA,EAAIgE,EAAOrM,OAAQqI,IAAK,CACtC,IAAMuE,EAAMP,EAAOhE,GAAG,GAChBwE,EAAMR,EAAOhE,GAAG,GAElBuE,EAAMF,IAAQA,EAASE,GACvBA,EAAMD,IAAQA,EAASC,GACvBC,EAAMN,IAAQA,EAASM,GACvBA,EAAMJ,IAAQA,EAASI,GAG7B,OAAIN,GAAU,KAAOG,GAAU,KAAOD,EAAS,KAAOE,EAAS,IACtD,CACL,CAAC,iBAAkB,kBACnB,CAAC,kBAAmB,mBAIjB,CACL,CAACJ,EAAQG,GACT,CAACD,EAAQE,IKvHUG,CAAUT,KAGzBU,EAAOxU,EAAMyU,cAAcpT,KAAI,SAAAoD,GACnC,OACE,eAACiQ,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMC,KAAP,CAAYnN,QAAS,WAAOqM,EAAUpP,IAAUzH,UAAU,UAA1D,SACIyH,EAAOwK,MAEX,cAACyF,GAAA,EAAMC,KAAP,UAEK3U,EAAM4U,YACPnQ,EAAOoQ,MAAQ,GACb,cAACtL,EAAA,EAAD,CAAOC,IAAG,UAAK1L,gCAAL,8BAAyDgX,OAAO,OAC1E,cAACvL,EAAA,EAAD,CAAOC,IAAG,UAAK1L,gCAAL,iCAA4DgX,OAAO,OAH1DrQ,EAAOoQ,UANlBpQ,EAAOwK,QAgB3B,OACE,eAACyF,GAAA,EAAD,CAAOK,QAAM,EAAb,UACE,cAACL,GAAA,EAAMzG,OAAP,UACE,eAACyG,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMM,WAAP,kBACA,cAACN,GAAA,EAAMM,WAAP,UAAoBhV,EAAM4U,YAAc,YAAc,2BAI1D,cAACF,GAAA,EAAMO,KAAP,UACIT,OAMK,SAASU,GAASlV,GAC/B,OACE,cAAC,GAAD,eAAUA,ICvCd,SAASiI,GAAMjI,GAAQ,IACbd,EAAQgD,IAARhD,IAERyE,qBAAU,WACRyO,MACC,CAACpS,EAAM4U,YAAa5U,EAAMqT,iBAE7B,IAAMjB,EAAY,uCAAG,oCAAApR,EAAA,4DAEJ,qEAFI,SAGK9B,EAAIV,IAAIc,MAAM6V,aADvB,qEAC4C,KAHxC,cAGbC,EAHa,OAMnB1W,QAAQC,IAAI,iDANO,SAOI+P,QAAQC,IAAIyG,EAAU/T,IAAV,uCAAc,WAAMuQ,GAAN,uBAAA5Q,EAAA,6DAC/C4Q,EAAMA,EAAIyD,QAIJpG,EAAM2C,EAAI7T,OAAO,IALwB,SAOzBmB,EAAI0E,MAAMgP,QAAQC,OAAlB,YAA8B5D,IAPL,cAOzC6D,EAPyC,gBAQrB5T,EAAI0E,MAAMgP,QAAQI,QAAQF,EAAQC,WARb,cAQzCE,EARyC,OAUzCC,EAAeD,EAAY,IAAMA,EAAY,GAAGF,UAChDI,EAAaD,GAAgBA,EAAa,IAAMA,EAAa,GAAGE,SAXvB,kBAaxC,CAACnE,IAAKe,GAAUf,GAAMqE,MAAOH,EAAYmC,MAAOxC,EAAQC,YAbhB,4CAAd,wDAPhB,UAObwC,EAPa,QAuBbC,EAAUD,EAASlU,KAAI,SAAAoU,GAAS,OAAIA,EAAUxG,SAEnCuG,EAAQ/N,OAzBN,oEA0BD4K,MAAM,aAAemD,EAAQ1I,KAAK,MA1BjC,aA0Bb2F,EA1Ba,QA4BXC,GA5BW,kCA6BED,EAAIF,OA7BN,QA6BX9F,EA7BW,OA+BiB,oBAAvBzM,EAAM0V,cACf1V,EAAM0V,aAAajJ,EAAKpL,KAAI,SAAAsU,GAC1B,IAAMrC,EAAQiC,EAASK,MAAK,SAAAtC,GAE1B,OAAQtT,EAAM4U,aAAetB,EAAMA,QAAUtT,EAAMqT,iBAAmBC,EAAMrE,MAAQ0G,EAAO1G,IAAIlL,cAIjG,OAFIuP,IAAOqC,EAAOrC,MAAQA,GAEnBqC,MAvCM,4CAAH,qDA6ClB,OACE,cAAC3E,GAAA,EAAD,CAAM0C,SAAUtB,EAAhB,SACE,cAAC9K,EAAA,EAAD,CAAQ9H,KAAK,SAAb,uBAKS,SAASqW,GAAY7V,GAClC,OACE,cAAC,GAAD,eAAUA,I,wBCjEd,SAASiI,GAAT,GAA8D,IAA9C6N,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,WACvC5U,EAAM6U,eAD+C,EAGPlT,mBAAS,GAHF,mBAGpDmT,EAHoD,KAGhCC,EAHgC,KAsC3D,OAjCAzS,qBAAU,WACRtC,EAAIgV,QAAQP,EAAWC,KACtB,CAACD,EAAWC,IACfpS,qBAAU,WACRtC,EAAIiV,UAAUN,KACb,CAACA,IACJrS,qBAAU,WACRjF,QAAQC,IAAIsX,GACZG,EAAsBD,EAAqB,KAC1C,CAACF,IAyBF,gCACE,cAAC9Y,EAAA,EAAD,CACEC,YAAY,mBACZC,IAAI,qDACJkZ,QAAS,KAEX,cAACC,GAAA,EAAD,CAEE/J,KAAMwJ,EACNpT,MAhCN,SAAsB4T,GACpB,MAAO,CACL7T,MAAO,UACP8T,OAAQ,EACRC,YAAa,IACbC,UAAWH,EAAQI,YAAcJ,EAAQI,WAAWvD,MAAQ,UAAY,YA4BtEwD,cAxBN,SAAuBL,EAAiBM,GACtC,IAAMC,EAAY,gIAGOP,EAAQI,WAAW5H,IAH1B,+CAIQwH,EAAQI,WAAWI,SAJ3B,4EAKqCR,EAAQI,WAAWK,YALxD,iDAMUT,EAAQI,WAAWM,OAN7B,qDAOcV,EAAQI,WAAWO,MAPjC,yDAQkBX,EAAQI,WAAWQ,WARrC,UASlBN,EAAMO,UAAUN,EAAc,CAAEO,SAAU,WAWjCpB,MASE,SAASqB,GAAOxX,GAC7B,OACE,cAAC,GAAD,eAAUA,ICvDd,SAASiI,GAAMjI,GACGkC,IAARhD,IADa,IAAD,EAEQ8D,mBAAS,MAFjB,mBAELN,GAFK,WAIdsQ,EAAUhT,EAAMwV,QAAQ9X,QAAO,SAAC+Z,EAAQC,GAC5C,OAAKA,EAAMpE,OAEImE,EAAO7B,MAAK,SAAA3G,GAAG,OAAIA,EAAIqE,MAAMrE,MAAQyI,EAAMpE,MAAMrE,QAGhEwI,EAAOpH,KAAKqH,GAFOD,GAHMA,IAOxB,IAAIpW,KAAI,SAAA4N,GACT,OAAOA,EAAIqE,OAASrE,EAAIqE,MAAMgC,SAC7BqC,QAAO,SAAAC,GAAC,OAAIA,KAEf,OACE,cAACrM,EAAA,EAAKkI,IAAN,CAAUvG,MAAO,EAAjB,SACE,cAAC3B,EAAA,EAAKC,OAAN,CAAa0B,MAAO,EAApB,SACE,cAAC3K,EAAD,aACEE,MAAM,wBACNjD,KAAK,YACLoD,MAAM,OACNC,MAAO,CACP6G,SAAU,WACVmO,MAAO,EACPC,IAAK,GAELpV,UAAWA,EACXI,MAAO,CACLO,UAAW,YACXC,SAAU,oBACVC,YAAa,CACX,CAAC/D,KAAM,iBAAkBwC,MAAOgR,EAAQlG,KAAK,MAC7C,CAACtN,KAAM,WAAYwC,MAAO,QAE5BqP,WAAY,YACZ7N,YAAa,CACX,CAAChE,KAAM,iBAAkBgC,KAAM,MAAOqG,UAAU,GAChD,CAACrI,KAAM,WAAYgC,KAAM,UAAWqG,UAAU,MAG9C7H,QAOC,SAAS6V,GAAY7V,GAClC,OACE,cAAC,GAAD,eAAUA,ICzDC,QACX,KAAQ,oBACR,IAAO,CACH,KAAQ,OACR,WAAc,CACV,KAAQ,kCAGhB,SAAY,ICOhB,SAASiI,GAAMjI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAGU8D,mBAAS,IAHnB,mBAGbwO,EAHa,KAGJW,EAHI,OAIYnP,mBAAS,IAJrB,mBAIb+U,EAJa,KAIHC,EAJG,OAKYhV,mBAAS,IALrB,mBAKbiV,EALa,KAKHC,EALG,OAMYlV,mBAAS,IANrB,mBAMbmV,EANa,KAMHC,EANG,OAOcpV,mBAAS,CAACsR,IAAK,UAAW+D,KAAM,YAP9C,mBAObvC,EAPa,aAQU9S,mBAAS,KARnB,mBAQb+S,EARa,aASc/S,mBAAS,CAAC,CAAC,WAAY,WAAa,CAAC,WAAY,cAT/D,mBASbgT,EATa,KASFjC,EATE,OAUgB/Q,mBAAS,eAAIsV,KAV7B,mBAUbrC,EAVa,KAUDsC,EAVC,OAWUvV,mBAAS,IAXnB,mBAWbwS,EAXa,KAWJgD,EAXI,OAYsBxV,mBAAS,IAZ/B,mBAYbyR,EAZa,KAYEgE,EAZF,OAakBzV,oBAAS,GAb3B,mBAab4R,EAba,KAaA8D,EAbA,KAmHdC,EAAc,uCAAG,WAAgBlM,GAAhB,6CAAAzL,EAAA,sDAkBrB,IAdAwX,EAAW/L,GAQLmM,EAAW,GACb5E,GAAU,EAAI/M,OAAOgN,UACrBC,EAASjN,OAAOgN,UAChBE,GAAU,EAAIlN,OAAOgN,UACrBG,EAASnN,OAAOgN,UAEX/E,EAAI,EAAGA,EAAIzC,EAAKhF,OAAQyH,IAAK,CAGpC,IAFM2J,EAAQpM,EAAKyC,GACb4E,EAASgF,GAAaD,EAAME,UACzBjJ,EAAI,EAAGA,EAAIgE,EAAOrM,OAAQqI,IAC3BuE,EAAMP,EAAOhE,GAAG,GAChBwE,EAAMR,EAAOhE,GAAG,GAElBuE,EAAMF,IAAQA,EAASE,GACvBA,EAAMD,IAAQA,EAASC,GACvBC,EAAMN,IAAQA,EAASM,GACvBA,EAAMJ,IAAQA,EAASI,GAG7BsE,EAASvI,KAAK,CACZ7Q,KAAM,UACNqX,WAAYgC,EACZE,SAAU,CACRvZ,KAAM,UACNwZ,YAAa,CAAClF,MAepBC,EAVgBC,GAAU,KAAOG,GAAU,KAAOD,EAAS,KAAOE,EAAS,IAC3E,CACE,CAAC,iBAAkB,kBACnB,CAAC,kBAAmB,mBAEtB,CACE,CAACJ,EAAQG,GACT,CAACD,EAAQE,KAKXmE,GAAc,SAAAtC,GACZ,OAAO,2BAAIA,GAAX,IAAuB2C,gBAGnBK,EAAaxM,EAAK/O,QAAO,SAAC+Z,EAAQC,GACtC,OAAKA,EAAMpE,OAEImE,EAAO7B,MAAK,SAAA3G,GAAG,OAAIA,EAAIqE,MAAMrE,MAAQyI,EAAMpE,MAAMrE,SAGhEyI,EAAM5D,OAASgF,GAAapB,EAAMqB,UAClCtB,EAAOpH,KAAKqH,IAHOD,GAHMA,IAQxB,IACCyB,EAAa,GAnEI,UAqEVhK,EAAI,EArEM,aAqEHA,EAAI+J,EAAWxR,QArEZ,qBAsEXiQ,EAAQuB,EAAW/J,IACdoE,MAvEM,yEAwEIpU,EAAI0E,MAAMuV,UAAUC,SAAS,EAAG1B,EAAMpE,MAAMgC,OAxEhD,QAwEX7Q,EAxEW,OAyEjByU,EAAW7I,KAAK,CACdwE,MAAOpQ,EAAOsO,UACd9D,IAAKyI,EAAMpE,MAAMrE,IACjB6E,OAAQ4D,EAAM5D,SA5EC,QAqEoB5E,IArEpB,2EAgFnBxQ,QAAQC,IAAR,MAhFmB,QAmFrB8Z,EAAiBS,GAnFI,2DAAH,sDAsFdJ,GAAe,SAAUO,GAQ7B,OAPyC,IAArCA,EAAYzS,QAAQ,eACtByS,EAAcA,EAAYtb,MAAM,YAAY0J,SAE1C4R,EAAYzS,QAAQ,QAAWyS,EAAY5R,OAAS,IACtD4R,EAAcA,EAAYtb,MAAM,GAAI,IAG/Bsb,EAAYxS,MAAM,KAAKxF,KAAI,SAAAiY,GAAQ,OAAIA,EAASzS,MAAM,KAAKxF,KAAI,SAAAuQ,GAAG,OAAI3K,OAAO2K,EAAIzL,eAK1F,OACE,sBAAKtD,MAAO,CAACqK,MAAO,QAApB,UACE,cAAC3B,EAAA,EAAD,CAAMgO,QAAS,EAAf,SACE,eAAChO,EAAA,EAAKkI,IAAN,WACE,cAAClI,EAAA,EAAKC,OAAN,CAAa4B,QAAQ,OAArB,SAA4B,6BAAI,2BAChC,cAAC7B,EAAA,EAAKC,OAAN,CAAa4B,QAAQ,QAArB,SAEEwH,EACA,cAAC,GAAD,aAAuBY,QAASA,GAAaxV,IAC7C,UAKN,eAACuL,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa0B,MAAO,GAApB,UACE,cAACsM,EAAA,EAAD,CAAcvc,OAlBL,CAAC,WAAY,WAkBUC,KAAM,GAAI2F,MAAO,CAAC4W,UAAW,QAASvM,MAAO,QAA7E,SACE,cAACsK,GAAD,CAAQ1B,UAAWA,EAAWC,QAASA,EAASC,UAAWA,EAAWC,WAAYA,MAEpF,kDACA,qBAAKpT,MAAO,CAACqK,MAAO,OAAQuM,UAAW,SAAvC,SACE,cAAC/E,GAAA,EAAD,CAAOK,QAAM,EAAb,SASE,eAACL,GAAA,EAAMO,KAAP,WACE,eAACP,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMC,KAAP,2CAGA,cAACD,GAAA,EAAMC,KAAP,UACInD,EAAO,MAEX,cAACkD,GAAA,EAAMC,KAAP,UACIoD,EAAQ,MAEZ,cAACrD,GAAA,EAAMC,KAAP,UACIsD,EAAQ,MAEZ,cAACvD,GAAA,EAAMC,KAAP,UACIwD,EAAQ,SAId,eAACzD,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMC,KAAP,mBAGA,cAACD,GAAA,EAAMC,KAAP,UACInD,EAAO,WAEX,cAACkD,GAAA,EAAMC,KAAP,UACIoD,EAAQ,WAEZ,cAACrD,GAAA,EAAMC,KAAP,UACIsD,EAAQ,WAEZ,cAACvD,GAAA,EAAMC,KAAP,UACIwD,EAAQ,cAId,eAACzD,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMC,KAAP,gDAGA,cAACD,GAAA,EAAMC,KAAP,UACInD,EAAO,cAEX,cAACkD,GAAA,EAAMC,KAAP,UACIoD,EAAQ,cAEZ,cAACrD,GAAA,EAAMC,KAAP,UACIsD,EAAQ,cAEZ,cAACvD,GAAA,EAAMC,KAAP,UACIwD,EAAQ,iBAId,eAACzD,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMC,KAAP,qBAGA,cAACD,GAAA,EAAMC,KAAP,UACInD,EAAO,SAEX,cAACkD,GAAA,EAAMC,KAAP,UACIoD,EAAQ,SAEZ,cAACrD,GAAA,EAAMC,KAAP,UACIsD,EAAQ,SAEZ,cAACvD,GAAA,EAAMC,KAAP,UACIwD,EAAQ,YAId,eAACzD,GAAA,EAAMjB,IAAP,WACE,cAACiB,GAAA,EAAMC,KAAP,yBAGA,cAACD,GAAA,EAAMC,KAAP,UACInD,EAAO,QAEX,cAACkD,GAAA,EAAMC,KAAP,UACIoD,EAAQ,QAEZ,cAACrD,GAAA,EAAMC,KAAP,UACIsD,EAAQ,QAEZ,cAACvD,GAAA,EAAMC,KAAP,UACIwD,EAAQ,qBAOtB,eAAC5M,EAAA,EAAKC,OAAN,CAAa0B,MAAO,EAApB,UACE,cAAC3B,EAAA,EAAD,CAAMgO,QAAS,EAAf,SACE,eAAChO,EAAA,EAAKkI,IAAN,WACE,cAAClI,EAAA,EAAKC,OAAN,CAAa4B,QAAQ,OAArB,SACE,cAACyI,GAAD,CACEH,aAAciD,EACdtF,eAAgBrT,EAAMqT,eACtBuB,YAAaA,MAGjB,cAACrJ,EAAA,EAAKC,OAAN,CAAa4B,QAAQ,QAArB,SACE,cAACsM,GAAA,EAAD,CACEC,QAAM,EACNlX,MAAM,iBACNmX,QAAUhF,EACV1K,SAlVY,SAAUpD,EAAG+S,GACvCnB,GAAgB9D,aAsVV,kDACA,cAACM,GAAD,aACET,cAAeA,EACfG,YAAaA,EACbb,aAAcA,GACV/T,IAEN,cAAC4T,GAAD,aAAWL,SAlTG,SAAU9G,GAG9B0F,EAAW1F,EAAK,IAAM,IACtBuL,EAAYvL,EAAK,IAAM,IACvByL,EAAYzL,EAAK,IAAM,IACvB2L,EAAY3L,EAAK,IAAM,IAQvB,IANA,IAAMmM,EAAW,GACb5E,GAAU,EAAI/M,OAAOgN,UACrBC,EAASjN,OAAOgN,UAChBE,GAAU,EAAIlN,OAAOgN,UACrBG,EAASnN,OAAOgN,UAEX/E,EAAI,EAAGA,EAAIzC,EAAKhF,OAAQyH,IAAK,CAGpC,IAFA,IAAM2J,EAAQpM,EAAKyC,GACb4E,EAASgF,GAAaD,EAAME,UACzBjJ,EAAI,EAAGA,EAAIgE,EAAOrM,OAAQqI,IAAK,CACtC,IAAMuE,EAAMP,EAAOhE,GAAG,GAChBwE,EAAMR,EAAOhE,GAAG,GAElBuE,EAAMF,IAAQA,EAASE,GACvBA,EAAMD,IAAQA,EAASC,GACvBC,EAAMN,IAAQA,EAASM,GACvBA,EAAMJ,IAAQA,EAASI,GAG7BsE,EAASvI,KAAK,CACZ7Q,KAAM,UACNqX,WAAYgC,EACZE,SAAU,CACRvZ,KAAM,UACNwZ,YAAa,CAAClF,MAepBC,EAVgBC,GAAU,IAAMG,GAAU,KAAOD,EAAS,IAAME,EAAS,IACzE,CACE,CAAC,iBAAkB,kBACnB,CAAC,kBAAmB,mBAEtB,CACE,CAACJ,EAAQG,GACT,CAACD,EAAQE,KAKXmE,GAAc,SAAAtC,GACZ,OAAO,2BAAIA,GAAX,IAAuB2C,kBAgQuB5Y,IAG1C,qBAAK6C,MAAO,CAAEiX,UAAW,QAAzB,SACE,cAAC,GAAD,eAAc9Z,eASX,SAAS+Z,GAAW/Z,GACjC,OACE,cAAC,GAAD,eAAUA,ICrYC,SAASiI,GAAMjI,GAAQ,IAAD,EACPgD,mBAAS,MADF,mBAC5ByB,EAD4B,KACpB/B,EADoB,OAEDM,mBAAS,CAAEsN,YAAa,KAAMC,UAAW,KAAMC,OAAQ,IAFtD,mBAG3BhO,GAH2B,UAGXxC,EAAhBwC,aAH2B,EAamBN,IAApClD,GAbiB,EAa3BI,SAb2B,EAajBJ,SAASC,EAbQ,EAaRA,aAGrBoJ,GAhB6B,EAaMlJ,SAGlBH,EAAQsJ,WAAWjH,KAAI,SAAAkH,GAAO,MAAK,CACxDpI,IAAKoI,EAAQjH,QACbU,MAAOuG,EAAQjH,QACfkH,KAAMD,EAAQhH,KAAKC,KAAKiH,cACxBC,KAAM,YAGFC,EACJN,EAAeZ,OAAS,EAAIY,EAAe,GAAGrG,MAAQ,GAGlDgY,EACNrR,GACiB,UAAjB1J,GACAD,EAAQib,QAAQtR,GAEhB,OAAInG,EAEF,eAAC+I,EAAA,EAAKC,OAAN,CAAa0B,MAAO,EAApB,UACE,kEACA,eAAC8D,GAAA,EAAD,WACE,cAACA,GAAA,EAAKC,MAAN,CAAYpO,MAAO,CAAEuO,UAAW,UAAhC,SACE,cAAC7O,EAAD,CACEC,YAAawX,EACbvX,MAAM,SACNjD,KAAK,YACLkD,UAAWA,EACXI,MAAO,CACLO,UAAW,WACXC,SAAU,WACVC,YAAa,CACXf,EAAYlB,QACZ,MAEF+P,WAAY,YACZ7N,YAAa,EACX,GAAM,QAKd,qBAAKX,MAAO,CAAEyO,aAAc,cAA5B,SAA6C7M,UAzB3B,KCd1B,SAASwD,KAAS,IAaApH,EAbD,EAC6BmC,mBAAS,MADtC,mBACRqQ,EADQ,KACQnL,EADR,OAEuChG,IAA9C9C,EAFO,EAEPA,SAAUJ,EAFH,EAEGA,QAASC,EAFZ,EAEYA,aAAcE,EAF1B,EAE0BA,SACnCqD,EACJ6Q,GACiB,UAAjBpU,GACAD,EAAQib,QAAQ5G,GAEZ6G,EAAS,SAAA1R,GAAI,OACjB,cAAC2R,EAAA,EAAD,CAAQC,QAAM,EAAd,SACE,cAACC,EAAA,EAAD,CAAQ5Q,KAAK,QAAb,SAAsBjB,OAa1B,GAAiB,UAAbpJ,EAAsB,OAVVyB,EAUyB1B,EATvC,cAACoM,EAAA,EAAD,CAAM+O,UAAQ,EAACf,QAAS,EAAGgB,QAAM,EAAjC,SACE,cAAChP,EAAA,EAAKC,OAAN,UACE,cAACgP,EAAA,EAAD,CAASC,UAAQ,EAACzM,SAAO,EAAC0M,UAAQ,EAChCC,OAAO,gCACP5N,QAAO,UAAKlM,SAMf,GAAiB,UAAbzB,EAAsB,OAAO8a,EAAO,2BAE7C,GAAqB,UAAjBjb,EACF,OAAOib,EAAO,kEAGhB,IAAMU,EAAaC,sBAOnB,OAHFC,SAASC,KAAKlY,MAAQ,uBAIlB,sBAAKmY,IAAKJ,EAAV,UACE,cAACK,EAAA,EAAD,CAAQC,QAASN,EAAjB,SACE,cAACvQ,EAAD,CAAiBnC,kBAAmBA,MAEtC,cAACiB,EAAA,EAAD,UACE,eAACoC,EAAA,EAAD,CAAM4P,WAAS,EAAC5B,QAAQ,QAAxB,UACE,cAAChO,EAAA,EAAKkI,IAAN,UACE,cAACsG,GAAD,CAAYvX,YAAaA,EAAa6Q,eAAgBA,MAExD,qBAAKxQ,MAAO,CAACqK,MAAO,OAAQuM,UAAW,QAASK,UAAW,QAA3D,SACE,cAACvO,EAAA,EAAKkI,IAAN,UACE,cAAChG,GAAD,QAWJ,cAAClC,EAAA,EAAKkI,IAAN,UACE,cAAC,GAAD,CAAsBjR,YAAaA,WAQzC,cAAC4Y,EAAA,EAAD,IACA,cAACjS,EAAA,EAAD,UACE,cAACoC,EAAA,EAAD,CAAM4P,WAAS,EAAC5B,QAAQ,QAAxB,SACE,eAAChO,EAAA,EAAKkI,IAAN,CAAU4H,WAAS,EAAnB,UACE,cAACtM,GAAD,IACA,cAACR,GAAD,IACA,cAAC5C,GAAD,IACA,cAACA,GAAD,CAAarB,WAAS,WAK5B,cAACxC,EAAD,OAKS,SAASwT,KACtB,OACE,cAAC,EAAD,UACE,cAAC,GAAD,MCzGNC,IAASC,OACP,cAACF,GAAD,UACE,cAAC,EAAD,MAEFR,SAASW,eAAe,W","file":"static/js/main.89e74a3b.chunk.js","sourcesContent":["import React from 'react';\nimport {MapContainer as Map, TileLayer, Marker, Popup} from 'react-leaflet';\n\nconst LeafletMap = () => {\n    const mapPositions = [11.123, 78.65];\n\n    return(\n        <Map \n            className = 'map'\n            center= {[mapPositions[0], mapPositions[1]]}\n            zoom= {5}\n        >\n            <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n        </Map>\n    );\n};\n\nexport default LeafletMap;\n","import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst types = require('./types.json');\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars, types };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.types,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  afterSubmit,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) { return; }\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    console.log(transformed);\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    if (isSudo()) {\n      console.log('isSudo');\n      await sudoTx();\n    } else if (isUncheckedSudo()) {\n      console.log('isUncheckedSudo');\n      await uncheckedSudoTx();\n    } else if (isSigned()) {\n      console.log('isSigned');\n      await signedTx();\n    } else if (isUnsigned()) {\n      console.log('isUnsigned');\n      await unsignedTx();\n    } else if (isQuery()) {\n      console.log('isQuery');\n      await query();\n    } else if (isRpc()) {\n      console.log('isRpc');\n      await rpc();\n    } else if (isConstant()) {\n      console.log('isConstant');\n      await constant();\n    }\n\n    if (typeof afterSubmit === 'function') afterSubmit();\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      } else if (inputParam && inputParam.value instanceof Object.getPrototypeOf(Uint8Array)) {\n        return inputParam.value;\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type => {\n    // TODO: make this more robust\n    // work around the lack of support for TypedArrays\n    if (type === '[u8;32]') return false;\n    return utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n  };\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  afterSubmit: PropTypes.func,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      {/* <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      /> */}\n      {/* <Button.Or /> */}\n      <TxButton\n        label='Submit'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      {/* <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      /> */}\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fdf7f2',\n        borderColor: '#000000',\n        paddingTop: '0.5em',\n        paddingBottom: '0.5em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <a\n            target='_blank'\n            rel='noopener noreferrer'\n            href='https://basinlogix.com'\n          >\n            {/* <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' /> */}\n            <Image src={`${process.env.PUBLIC_URL}/assets/basinlogix_full_logo_transparent1.png`} size='medium' />\n          </a>\n\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected\n    ? <Label pointing='left'>\n        <Icon name='tint' color='blue' />\n        {/* // maybe switch to asset balance */}\n        {accountBalance} \n      </Label>\n    : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <div style={{display: 'inline'}}>\n        <b>{(finalized ? 'Finalized' : 'Current') + ' Block ' + blockNumber + ': '}</b>\n        <Icon name='time' /> {blockNumberTimer}\n      </div>\n    </Grid.Column>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\n// Events to be filtered from feed\nconst FILTERED_EVENTS = [\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n];\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    let unsub = null;\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const { event, phase } = record;\n          const types = event.typeDef;\n\n          // show what we are busy with\n          const eventName = `${event.section}:${\n            event.method\n          }:: (phase=${phase.toString()})`;\n\n          if (FILTERED_EVENTS.includes(eventName)) return;\n\n          // loop through each of the parameters, displaying the type and data\n          const params = event.data.map(\n            (data, index) => `${types[index].type}: ${data.toString()}`\n          );\n\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n\n  const { feedMaxHeight = 250 } = props;\n\n  return (\n    <Grid.Column width={8}>\n      <h1 style={{ float: 'left' }}>Events</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <div style={{display: 'inline'}}>\n        <b>Metadata: </b>{'v' + metadata.version + ' '}\n        <Modal trigger={<Button compact  circular icon='settings' size='mini' />}>\n          <Modal.Header>Runtime Metadata</Modal.Header>\n          <Modal.Content scrolling>\n            <Modal.Description>\n              <pre>\n                <code>{JSON.stringify(metadata.data, null, 2)}</code>\n              </pre>\n            </Modal.Description>\n          </Modal.Content>\n        </Modal>\n      </div>\n    </Grid.Column>\n  );\n}\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api, socket } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <div style={{display: 'inline'}}>\n        <Icon name='setting' />v{nodeInfo.nodeVersion}\n      </div>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version\n    ? <Main {...props} />\n    : null;\n}\n","\nexport function encodeApnHuman(value) {\n  let apn = '';\n\n  for (let i = 0; i < value.length; i++) {\n    const char = value[i];\n    apn += ('3' + char);\n  }\n\n  let human = ''\n  for (let i = 0; i < 64 - apn.length; i++) {\n    human += '0';\n  }\n\n  human += apn;\n  return human;\n}\n\nexport function encodeApn(value, prefix) {\n  if (value === void 0 || value === null) value = '';\n  // convert user input string to all characters that can be base64 encoded\n  const codeUnits = new Uint8Array(value.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = value.charCodeAt(i);\n  }\n  const base64 = String.fromCharCode(...new Uint8Array(codeUnits.buffer));\n\n  // base64 encode the string\n  const len = base64.length;\n  const padding = 32 - len;\n  let bytes = new Uint8Array(32);\n\n  for (let i = 0; i < 32; i++) {\n    if (i < padding) continue;\n    const j = (padding - i) * -1;\n    bytes[i] = base64.charCodeAt(j);\n  }\n\n  if (prefix) {\n    // TODO: this is address32 it think?\n    let type = '2';\n    let typeBytes = new Uint8Array(33);\n    typeBytes[0] = 3;\n    for (let i = 0; i < 32; i++) {\n      typeBytes[i + 1] = bytes[i];\n    }\n\n    return typeBytes;\n  }\n  return bytes;\n}\n\nexport function decodeApn(value) {\n  if (value === void 0) value = '';\n\n  let encodedApn = '';\n\n  // remove padding\n  let hasPadding = true;\n  for (let i = 0; i < value.length; i++) {\n    const char = value[i];\n    if (hasPadding) {\n      if (char === '0') continue;\n      hasPadding = false;\n    }\n    encodedApn += char;\n  }\n\n  const chars = [];\n  for (let i = 0; i < encodedApn.length; i += 2) {\n    chars.push([encodedApn[i], encodedApn[i + 1]]);\n  }\n\n  let apn = '';\n  for (let i = 0; i < chars.length; i++) {\n    const charSet = chars[i];\n    apn += charSet[1];\n  }\n  return apn;\n}\n\nexport function base64ToArray(value) {\n  if (value === void 0) value = '';\n  // convert user input string to all characters that can be base64 encoded\n  const codeUnits = new Uint8Array(value.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = value.charCodeAt(i);\n  }\n  const base64 = String.fromCharCode(...new Uint8Array(codeUnits.buffer));\n\n  // base64 encode the string\n  const len = base64.length;\n  const padding = 32 - len;\n  let bytes = new Uint8Array(32);\n  for (let i = 0; i < 32; i++) {\n    if (i < padding) continue;\n    const j = (padding - i) * -1;\n    bytes[i] = base64.charCodeAt(j);\n  }\n  return bytes;\n}\n\nexport function getBounds(coords) {\n  let maxLat = -1 * Number.MAX_VALUE;\n  let minLat = Number.MAX_VALUE\n  let maxLon = -1 * Number.MAX_VALUE;\n  let minLon = Number.MAX_VALUE;\n\n  for (let j = 0; j < coords.length; j++) {\n    const lon = coords[j][0];\n    const lat = coords[j][1];\n\n    if (lon > maxLon) maxLon = lon;\n    if (lon < minLon) minLon = lon;\n    if (lat > maxLat) maxLat = lat;\n    if (lat < minLat) minLat = lat;\n  }\n\n  if (maxLat < -180 || maxLon < -360 || minLat > 180 || minLon > 360) {\n    return [\n      [37.907506579631, -121.223565024536],\n      [37.9296422893884, -121.038149460093]\n    ];\n  }\n\n  return [\n    [maxLat, maxLon],\n    [minLat, minLon]\n  ];\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Label, Icon } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\nimport { encodeApn } from './helpers.js';\n\n\nexport default function Main (props) {\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({ addressFrom: null, addressTo: null, amount: 0 });\n  const { accountPair } = props;\n\n  const onChange = (_, data) => {\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\n    setAddressFromEncoded(encodeApn(addressFrom, true));\n    setAddressToEncoded(encodeApn(addressTo, true));\n  };\n\n  const [addressFromEncoded, setAddressFromEncoded] = useState('');\n  const [addressToEncoded, setAddressToEncoded] = useState('');\n\n  const { addressFrom, addressTo, amount } = formState;\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Water Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            fluid\n            label='From'\n            type='text'\n            placeholder='address'\n            state='addressFrom'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            fluid\n            label='To'\n            type='text'\n            placeholder='address'\n            state='addressTo'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            fluid\n            label='Amount'\n            type='number'\n            state='amount'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Submit'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'allocator',\n              callable: 'tradeTokens',\n              inputParams: [\n                '0', \n                {type: 'Source', value: addressFromEncoded}, \n                {type: 'Source', value: addressToEncoded}, \n                amount\n              ],\n              interxType: 'EXTRINSIC',\n              paramFields: [\n                {name: 'assetID', type: 'AssetId'},\n                {name: 'fromapn', type: 'Source'},\n                {name: 'toapn', type: 'Source'},\n                {name: 'amt', type: 'Balance1'}\n              ]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","export const stockData = [\n  {\n    company: \"Twitter Inc\",\n    ticker: \"TWTR\",\n    stockPrice: \"22.76 USD\",\n    timeElapsed: \"5 sec ago\",\n  },\n  {\n    company: \"Square Inc\",\n    ticker: \"SQ\",\n    stockPrice: \"45.28 USD\",\n    timeElapsed: \"10 sec ago\",\n  },\n  {\n    company: \"Shopify Inc\",\n    ticker: \"SHOP\",\n    stockPrice: \"341.79 USD\",\n    timeElapsed: \"3 sec ago\",\n  },\n  {\n    company: \"Sunrun Inc\",\n    ticker: \"RUN\",\n    stockPrice: \"9.87 USD\",\n    timeElapsed: \"4 sec ago\",\n  },\n  {\n    company: \"Adobe Inc\",\n    ticker: \"ADBE\",\n    stockPrice: \"300.99 USD\",\n    timeElapsed: \"10 sec ago\",\n  },\n  {\n    company: \"HubSpot Inc\",\n    ticker: \"HUBS\",\n    stockPrice: \"115.22 USD\",\n    timeElapsed: \"12 sec ago\",\n  },\n];","import { useState, useEffect } from 'react';\nimport { Button, Grid, Modal } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\nimport { encodeApn } from './helpers.js';\n\nconst initInputParams = [\n  {type: 'ProxyType', value: 'Any'},\n  {type: 'BlockNumber', value: '0'},\n  {type: 'u16', value: '0'},\n  {type: '[u8;32]', value: ''}\n];\n\nfunction Main (props) {\n  const apnData = props.apnData;\n  // Note: setStatus is required by TxButton\n  const [status, setStatus] = useState(null);\n  const [open, setOpen] = useState(false);\n\n  const [inputParams, setInputParams] = useState([...initInputParams]);\n\n  const openSuccessModal = function () {\n    setOpen(true);\n  };\n\n  useEffect(function () {\n    if (!apnData) return;\n\n    const inputParams = [...initInputParams];\n    const val = apnData.apn && apnData.apn.toString();\n    inputParams[3].value = val && encodeApn(val);\n    setInputParams(inputParams);\n  }, [apnData]);\n\n  return (\n    <span>\n      { (apnData && apnData.apn)\n      ? <TxButton\n        label='Claim APN'\n        type='SIGNED-TX'\n        color='blue'\n        setStatus={setStatus}\n        afterSubmit={openSuccessModal}\n        attrs={{\n          palletRpc: 'claimer',\n          callable: 'createApnAccount',\n          inputParams: inputParams,\n          interxType: 'EXTRINSIC',\n          paramFields: [\n            {name: 'proxy_type', type: 'ProxyType', optional: false},\n            {name: 'delay', type: 'BlockNumber', optional: false},\n            {name: 'index', type: 'u8', optional: false},\n            {name: 'apn_value', type: '[u8;32]', optional: false}\n          ]\n        }}\n        {...props}\n      />\n      : null }\n\n      <Modal\n        onClose={() => setOpen(false)}\n        open={open}\n      >\n        <Modal.Header>APN has been claimed</Modal.Header>\n        <Modal.Actions>\n          <Button\n            content=\"OK\"\n            labelPosition='right'\n            icon='checkmark'\n            onClick={() => setOpen(false)}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n    </span>\n  );\n}\n\nexport default function ApnConfirmer (props) {\n  return (\n    <Main {...props} />\n  );\n};\n","import { useState } from 'react';\nimport { Grid, Form, Input, Button } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport ApnConfirmer from './ApnConfirmer';\nimport { encodeApnHuman, encodeApn } from './helpers.js';\n\nfunction Main (props) {\n    const { api } = useSubstrate();\n    const [apn, setApn] = useState('');\n    const [apnData, setApnData] = useState({});\n\n    const handleSubmit = async function () {\n\n      //check the single apn search to return null to fire error\n      const res1 = await fetch('/apn/' + apn);\n      const data1 = await res1.json();\n\n      const res = await fetch('/apn/list/' + apn);\n      const data = await res.json();\n\n      if (res.ok && data\n         && res1.ok && data1 //check the single apn search to return null to fire error\n\n         ) {\n        const apnEnc = '0x' + encodeApnHuman(data[0].apn);\n\n        let delegateId;\n        try {\n          const proxyId = await api.query.claimer.lookup(apnEnc);\n          console.log(proxyId.toHuman());\n          const accountInfo = await api.query.claimer.proxies(proxyId.toHuman());\n          const delegateInfo = accountInfo[0] && accountInfo[0].toHuman();\n          delegateId = delegateInfo && delegateInfo[0] && delegateInfo[0].delegate;\n        } catch (err) {\n          // if we get here the proxy lookup failed, which usually means the apn hasn't been claimed\n          // this isn't an issue so we catch the error and move on\n          console.log(err);\n        }\n\n        if (delegateId === props.accountAddress) data.owner = true;\n\n        setApnData(data[0]);\n\n        if (typeof props.apnFound === 'function') {\n          props.apnFound(data);\n        }\n      } else {\n        alert('could not find APN');\n      }\n    };\n\n    const apnChange = function (ev, data) {\n      setApn(data.value);\n    };\n\n    return (\n      <Grid.Row width={8}>\n        <Grid.Column width={4}>\n          <h1>APN Search</h1>\n          <Form onSubmit={handleSubmit}>\n            <Form.Field>\n              <Input\n                placeholder='Assessor Parcel Number (APN)'\n                fluid\n                type='text'\n                style={{paddingBottom: '10px'}}\n                state={ apn }\n                value={ apn }\n                onChange={ apnChange }\n              />\n              <Grid>\n                <Grid.Column floated='left' width={8}>\n                  <Button type='submit' style={{width: '100%'}}>Search</Button>\n                </Grid.Column>\n                <Grid.Column floated='right' width={8}>\n                  <ApnConfirmer style={{width: '100%'}} key={ apn } apnData={ apnData } {...props} />\n                </Grid.Column>\n              </Grid>\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Grid.Row>\n    );\n}\n\nexport default function ApnFinder (props) {\n  return (\n    <Main {...props}/>\n  );\n}\n","import { Table, Image } from 'semantic-ui-react';\nimport { getBounds } from './helpers.js';\n\n\nfunction Main(props) {\n  const centerMap = function (status) {\n    const coords = status.coords;\n\n    props.setMapBounds(getBounds(coords))\n  };\n\n  const rows = props.apnStatusList.map(status => {\n    return (\n      <Table.Row key={status.apn}>\n        <Table.Cell onClick={() => {centerMap(status)}} className='js-link'>\n          { status.apn }\n        </Table.Cell>\n        <Table.Cell>\n          {\n            !props.isRegulator ? status.alloc :\n            status.alloc < 10 ? \n              <Image src={`${process.env.PUBLIC_URL}/assets/red-cross-mark.png`} height=\"19\" /> :\n              <Image src={`${process.env.PUBLIC_URL}/assets/white-green-check.svg`} height=\"19\" />\n          }\n        </Table.Cell>\n      </Table.Row>\n    );\n  });\n\n  return (\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>APN</Table.HeaderCell>\n          <Table.HeaderCell>{ props.isRegulator ? 'Compliant' : 'Allocation (ACFT)'}</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>\n        { rows }\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default function ApnTable(props) {\n  return (\n    <Main {...props} />\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { Grid, Form, Input, Button } from 'semantic-ui-react';\nimport ApnConfirmer from './ApnConfirmer';\nimport { useSubstrate } from './substrate-lib';\nimport { codec } from '@polkadot/types';\nimport { u8aToHex, u8aToString } from '@polkadot/util';\nimport { decodeApn } from './helpers.js';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n\n  useEffect(() => {\n    handleSubmit()\n  }, [props.isRegulator, props.accountAddress]);\n\n  const handleSubmit = async function () {\n\n    const prefix = '0x2df95c7f7f0d67daa549602785d7beae891ad457bf4da54990fa84a2acb148a2';\n    const lookupRes = await api.rpc.state.getKeysPaged(prefix, 1000);\n    //const lookupRes = await api.query.claimer.proxies('0x');\n\n    console.log('Calling RPC with `getKeys(0)`, got response: ');\n    const ownerMap = await Promise.all(lookupRes.map(async val => {\n      val = val.toHex();\n\n      // Need to feed the chain a new version of apn (without 3s and with values of interest at the end) https://basin-logix.atlassian.net/browse/BL2-65?focusedCommentId=10040 \n      // TODO: values are at the end, but the 3s are still present\n      const apn = val.slice(-64); // apn is also the MultiAddress:Address32 variant of the apn_account\n\n      const proxyId = await api.query.claimer.lookup(`0x${apn}`);\n      const accountInfo = await api.query.claimer.proxies(proxyId.toHuman());\n\n      const delegateInfo = accountInfo[0] && accountInfo[0].toHuman();\n      const delegateId = delegateInfo && delegateInfo[0] && delegateInfo[0].delegate;\n\n      return {apn: decodeApn(apn), owner: delegateId, proxy: proxyId.toHuman()};\n    }));\n\n    const apnList = ownerMap.map(ownership => ownership.apn);\n\n    if (!(apnList && apnList.length)) return;\n    const res = await fetch('/apn/list/' + apnList.join(','));\n\n    if (res.ok) {\n      const data = await res.json();\n\n      if (typeof props.apnListFound === 'function') {\n        props.apnListFound(data.map(dbData => {\n          const owner = ownerMap.find(owner => {\n            // use `props.accountAddress` to find the apnList we want to query, unless we are using regulator view\n            return (props.isRegulator || owner.owner === props.accountAddress) && owner.apn === dbData.apn.toString();\n          });\n          if (owner) dbData.owner = owner;\n\n          return dbData;\n        }));\n      }\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Button type='submit'>Refresh</Button>\n    </Form>\n  );\n}\n\nexport default function MapRefresh (props) {\n  return (\n    <Main {...props}/>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { TileLayer, GeoJSON, useMap, Popup } from 'react-leaflet';\n\n\nfunction Main({ mapCenter, mapZoom, mapBounds, parcelInfo }) {\n  const map = useMap();\n\n  const [triggerGeoReRender, setTriggerGeoReRender] = useState(1);\n\n  useEffect(function () {\n    map.setView(mapCenter, mapZoom);\n  }, [mapCenter, mapZoom]);\n  useEffect(function () {\n    map.fitBounds(mapBounds);\n  }, [mapBounds]);\n  useEffect(function () {\n    console.log(parcelInfo);\n    setTriggerGeoReRender(triggerGeoReRender + 1);\n  }, [parcelInfo]);\n\n  function geoJSONStyle(feature) {\n    return {\n      color: '#1f2021',\n      weight: 1,\n      fillOpacity: 0.65,\n      fillColor: feature.properties && feature.properties.owner ? '#2450ff' : '#999999',\n    };\n  }\n\n  function onEachFeature(feature: Object, layer: Object) {\n    const popupContent = `\n    <div style=\"overflow-wrap:auto;white-space: nowrap;\">\n    <h3>APN Information</h3>\n    <pre><b>APN</b>: <br />${feature.properties.apn}</pre>\n    <pre><b>Crop</b>: <br />${feature.properties.crop2016}</pre>\n    <pre><b>Groundwater Sustainability Agency</b>: <br />${feature.properties.agency_name}</pre>\n    <pre><b>County</b>: <br />${feature.properties.county}</pre>\n    <pre><b>Area Acres</b>: <br />${feature.properties.acres}</pre>\n    <pre><b>Geometric Area</b>: <br />${feature.properties.shape_area}</pre>`\n    layer.bindPopup(popupContent, { maxWidth: \"auto\"});\n  }\n\n  return (\n    <div>\n      <TileLayer\n        attribution='2021 Google Maps'\n        url=\"https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}\"\n        opacity={0.7}\n      />\n      <GeoJSON\n        key={triggerGeoReRender}\n        data={parcelInfo}\n        style={geoJSONStyle}\n        onEachFeature={onEachFeature}\n      />\n    </div>\n  );\n};\n\nexport default function ApnMap(props) {\n  return (\n    <Main {...props} />\n  );\n};\n","import { useState } from 'react';\nimport { Grid, Form, Button } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\nimport { useSubstrate } from './substrate-lib';\nimport { encodeApn } from './helpers.js';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n\n  const proxies = props.apnList.reduce((unique, datum) => {\n    if (!datum.owner) return unique;\n\n    const exists = unique.find(apn => apn.owner.apn === datum.owner.apn);\n    if (exists) return unique;\n\n    unique.push(datum);\n    return unique;\n  }, []).map(apn => {\n    return apn.owner && apn.owner.proxy;\n  }).filter(p => p);\n\n  return (\n    <Grid.Row width={8}>\n      <Grid.Column width={4}>\n        <TxButton\n          label='Distribute Allocation'\n          type='SIGNED-TX'\n          color='blue'\n          style={{\n          position: 'absolute',\n          right: 1,\n          top: 1,\n          }}\n          setStatus={setStatus}\n          attrs={{\n            palletRpc: 'allocator',\n            callable: 'issueTokenAirdrop',\n            inputParams: [\n              {type: 'Vec<AccountId>', value: proxies.join(',')},\n              {type: 'Balance1', value: '100'}\n            ],\n            interxType: 'EXTRINSIC',\n            paramFields: [\n              {type: 'Vec<AccountId>', name: 'apn', optional: false},\n              {type: 'Balance1', name: 'atokens', optional: false}\n            ]\n          }}\n          {...props}\n        />\n      </Grid.Column>\n    </Grid.Row>\n  );\n}\n\nexport default function MapRefresh (props) {\n  return (\n    <Main {...props}/>\n  );\n}\n","export default {\n    \"type\": \"FeatureCollection\",\n    \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n            \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n    },\n    \"features\": []\n};\n","// @flow\nimport React, { useState } from 'react';\nimport { MapContainer } from 'react-leaflet';\nimport { Grid, Radio, Table } from 'semantic-ui-react';\n\nimport ApnFinder from './ApnFinder';\nimport ApnTable from './ApnTable';\nimport MapRefresh from './MapRefresh';\nimport ApnMap from './ApnMap';\nimport AllocationDistributor from './AllocationDistributor';\nimport Transfer from './Transfer';\nimport initParcelInfo from './assets/emptymap.js';\nimport { useSubstrate } from './substrate-lib';\n\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n\n  const [apnData, setApnData] = useState({});\n  const [apnData1, setApnData1] = useState({});\n  const [apnData2, setApnData2] = useState({});\n  const [apnData3, setApnData3] = useState({});\n  const [mapCenter, setMapCenter] = useState({lat: 37.975438, lng: -121.274070});\n  const [mapZoom, setMapZoom] = useState(12);\n  const [mapBounds, setMapBounds] = useState([[37.995438, -121.174070], [37.905438, -121.294070]]);\n  const [parcelInfo, setParcelInfo] = useState({...initParcelInfo});\n  const [apnList, setApnList] = useState([]);\n  const [apnStatusList, setApnStatusList] = useState([]);\n  const [isRegulator, setIsRegulator] = useState(false);\n\n  const regulatorViewChange = function (e, args) {\n    setIsRegulator(!isRegulator);\n  };\n\n  const updateParcel = function (data) {\n    const coords = data ? parsePolygon(data.geometry) : [[-121.274070, 37.975438]];\n    setMapCenter({\n      lat: coords[0][1],\n      lng: coords[0][0]\n    });\n\n    let maxLat = -1 * Number.MAX_VALUE;\n    let minLat = Number.MAX_VALUE\n    let maxLon = -1 * Number.MAX_VALUE;\n    let minLon = Number.MAX_VALUE;\n    for (let i = 0; i < coords.length; i++) {\n      const lon = coords[i][0];\n      const lat = coords[i][1];\n\n      if (lon > maxLon) maxLon = lon;\n      if (lon < minLon) minLon = lon;\n      if (lat > maxLat) maxLat = lat;\n      if (lat < minLat) minLat = lat;\n    }\n    setMapBounds([[maxLat, maxLon], [minLat, minLon]])\n\n    setParcelInfo(parcelInfo => {\n      const features = data ? [{\n        type: 'Feature',\n        properties: data,\n        geometry: {\n          type: 'Polygon',\n          coordinates: [coords]\n        }\n      }] : [];\n\n      return {...parcelInfo, features};\n    });\n\n    // show data in table below map\n    setApnData(data || {});\n\n  };\n\n  const updateParcels = function (data) {\n\n    // show data in table below map\n    setApnData(data[0] || {});\n    setApnData1(data[1] || {});\n    setApnData2(data[2] || {});\n    setApnData3(data[3] || {});\n\n    const features = [];\n    let maxLat = -1 * Number.MAX_VALUE;\n    let minLat = Number.MAX_VALUE\n    let maxLon = -1 * Number.MAX_VALUE;\n    let minLon = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      const claim = data[i];\n      const coords = parsePolygon(claim.geometry);\n      for (let j = 0; j < coords.length; j++) {\n        const lon = coords[j][0];\n        const lat = coords[j][1];\n\n        if (lon > maxLon) maxLon = lon;\n        if (lon < minLon) minLon = lon;\n        if (lat > maxLat) maxLat = lat;\n        if (lat < minLat) minLat = lat;\n      }\n\n      features.push({\n        type: 'Feature',\n        properties: claim,\n        geometry: {\n          type: 'Polygon',\n          coordinates: [coords]\n        }\n      });\n    }\n\n    const bounds = (maxLat < -90 || maxLon < -180 || minLat > 90 || minLon > 180) ?\n    [\n      [37.907506579631, -121.223565024536],\n      [37.9296422893884, -121.038149460093]\n    ] :\n    [\n      [maxLat, maxLon],\n      [minLat, minLon]\n    ];\n\n    setMapBounds(bounds);\n\n    setParcelInfo(parcelInfo => {\n      return {...parcelInfo, features};\n    });\n\n\n  };\n\n  const refreshApnList = async function (data) {\n    //console.log(JSON.stringify(data, null, 4));\n\n    // TODO: Not sure is we need this in state\n    setApnList(data);\n\n    // // show data in table below map, HACK\n    // setApnData(data[0] || {});\n    // setApnData1(data[1] || {});\n    // setApnData2(data[2] || {});\n    // setApnData3(data[3] || {});\n\n    const features = [];\n    let maxLat = -1 * Number.MAX_VALUE;\n    let minLat = Number.MAX_VALUE\n    let maxLon = -1 * Number.MAX_VALUE;\n    let minLon = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      const claim = data[i];\n      const coords = parsePolygon(claim.geometry);\n      for (let j = 0; j < coords.length; j++) {\n        const lon = coords[j][0];\n        const lat = coords[j][1];\n\n        if (lon > maxLon) maxLon = lon;\n        if (lon < minLon) minLon = lon;\n        if (lat > maxLat) maxLat = lat;\n        if (lat < minLat) minLat = lat;\n      }\n\n      features.push({\n        type: 'Feature',\n        properties: claim,\n        geometry: {\n          type: 'Polygon',\n          coordinates: [coords]\n        }\n      });\n    }\n\n    const bounds = (maxLat < -180 || maxLon < -360 || minLat > 180 || minLon > 360) ?\n    [\n      [37.907506579631, -121.223565024536],\n      [37.9296422893884, -121.038149460093]\n    ] :\n    [\n      [maxLat, maxLon],\n      [minLat, minLon]\n    ];\n\n    setMapBounds(bounds);\n\n    setParcelInfo(parcelInfo => {\n      return {...parcelInfo, features};\n    });\n\n    const uniqueApns = data.reduce((unique, datum) => {\n      if (!datum.owner) return unique;\n\n      const exists = unique.find(apn => apn.owner.apn === datum.owner.apn);\n      if (exists) return unique;\n\n      datum.coords = parsePolygon(datum.geometry);\n      unique.push(datum);\n      return unique;\n    }, []);\n    let statusList = [];\n    try {\n      for (let i = 0; i < uniqueApns.length; i++) {\n        const datum = uniqueApns[i];\n        if (!datum.owner) continue;\n        const status = await api.query.allocator.balances(0, datum.owner.proxy);\n        statusList.push({\n          alloc: status.toHuman(),\n          apn: datum.owner.apn,\n          coords: datum.coords\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    setApnStatusList(statusList)\n  };\n\n  const parsePolygon = function (geometryStr) {\n    if (geometryStr.indexOf('POLYGON((') === 0) {\n      geometryStr = geometryStr.slice('POLYGON(('.length);\n    }\n    if (geometryStr.indexOf('))') === (geometryStr.length - 2)) {\n      geometryStr = geometryStr.slice(0, -2);\n    }\n\n    return geometryStr.split(',').map(coordSet => coordSet.split(' ').map(val => Number(val.trim())));\n  };\n\n  const position = [37.975438, -121.274070];\n\n  return (\n    <div style={{width: '100%'}}>\n      <Grid columns={2}>\n        <Grid.Row>\n          <Grid.Column floated='left'><h1><br/></h1></Grid.Column>\n          <Grid.Column floated='right'>\n          {\n            isRegulator ?\n            <AllocationDistributor apnList={apnList} {...props}></AllocationDistributor> :\n            ''\n          }\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Grid>\n        <Grid.Column width={12}>\n          <MapContainer center={position} zoom={12} style={{minHeight: '44rem', width: '100%'}}>\n            <ApnMap mapCenter={mapCenter} mapZoom={mapZoom} mapBounds={mapBounds} parcelInfo={parcelInfo} />\n          </MapContainer>\n          <h1>Land Parcel Data</h1>\n          <div style={{width: '100%', minHeight: '10rem'}}>\n            <Table celled>\n              {/* <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell> </Table.HeaderCell>\n                  <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header> */}\n{/* HACK in lieu of dynamic table */}\n\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell>\n                    Assessor Parcel Number (APN)\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData['apn'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData1['apn'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData2['apn'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData3['apn'] }\n                  </Table.Cell>\n                </Table.Row>\n            \n                <Table.Row>\n                  <Table.Cell>\n                    Crop\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData['crop2016'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData1['crop2016'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData2['crop2016'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData3['crop2016'] }\n                  </Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                  <Table.Cell>\n                    Groundwater Sustainability Agency\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData['agency_name'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData1['agency_name'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData2['agency_name'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData3['agency_name'] }\n                  </Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                  <Table.Cell>\n                    County\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData['county'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData1['county'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData2['county'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData3['county'] }\n                  </Table.Cell>\n                </Table.Row>\n\n                <Table.Row>\n                  <Table.Cell>\n                    Area Acres\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData['acres'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData1['acres'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData2['acres'] }\n                  </Table.Cell>\n                  <Table.Cell>\n                    { apnData3['acres'] }\n                  </Table.Cell>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </div>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Grid columns={2}>\n            <Grid.Row>\n              <Grid.Column floated='left'>\n                <MapRefresh\n                  apnListFound={refreshApnList}\n                  accountAddress={props.accountAddress}\n                  isRegulator={isRegulator}\n                />\n              </Grid.Column>\n              <Grid.Column floated='right'>\n                <Radio\n                  toggle\n                  label='Regulator View'\n                  checked={ isRegulator }\n                  onChange={ regulatorViewChange }\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <h1>Water Allocation</h1>\n          <ApnTable\n            apnStatusList={apnStatusList}\n            isRegulator={isRegulator}\n            setMapBounds={setMapBounds}\n            {...props}\n          ></ApnTable>\n          <ApnFinder apnFound={ updateParcels } {...props} />\n          {/* <ApnFinder apnsFound={ refreshApnList } {...props} /> */}\n\n          <div style={{ marginTop: '2rem' }}>\n            <Transfer {...props} />\n          </div>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n\n};\n\nexport default function GeoJsonMap(props) {\n  return (\n    <Main {...props} />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Label, Icon } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\nimport { encodeApn, base64ToArray } from './helpers.js';\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\n\nexport default function Main (props) {\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({ addressFrom: null, addressTo: null, amount: 0 });\n  const { accountPair } = props;\n  // const { setAccountAddress } = props;\n\n\n  const onChange = (_, data) => {\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\n    setAddressFromEncoded(encodeApn(addressFrom, true));\n    setAddressToEncoded(addressTo);\n  };\n\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n\n  const accountPair1 =\n  initialAddress &&\n  keyringState === 'READY' &&\n  keyring.getPair(initialAddress);\n\n  if(!accountPair) return null;\n  return (\n    <Grid.Column width={8}>\n      <h1>Register Injected Account on BLX</h1>\n      <Form>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair1}\n            label='Submit'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'balances',\n              callable: 'transfer',\n              inputParams: [\n                accountPair.address,  // issue here with accountPair being null on init. it doesnt like this. \n                1000000000000000\n              ],\n              interxType: 'EXTRINSIC',\n              paramFields: [\n                true, true\n              ]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Divider, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport BlockNumber from './BlockNumber';\nimport Events from './Events';\nimport Interactor from './Interactor';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\n//import Upgrade from './Upgrade';\nimport { ApnTokenInfo } from './ApnTokenInfo';\nimport LeafletMap from './LeafletMap';\nimport GeoJsonMap from './GeoJsonMap';\n\nimport Register_new_account from './Register_new_account';\n\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${err}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n  //const position = [this.state.lat, this.state.lng]\n  const position = [51.505, -0.09]\n\ndocument.body.style = 'background: #fdf7f2;';\n\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row>\n            <GeoJsonMap accountPair={accountPair} accountAddress={accountAddress} />\n          </Grid.Row>\n          <div style={{width: '100%', minHeight: '10rem', marginTop: '2rem'}}>\n            <Grid.Row>\n              <Events />\n            </Grid.Row>\n          </div>\n          {/* <div style={{width: '100%'}}>\n            <Grid.Row>\n              <Interactor accountPair={accountPair} />\n            </Grid.Row>\n          </div>\n          <Grid.Row>\n            <TemplateModule accountPair={accountPair} />\n          </Grid.Row> */}\n          <Grid.Row>\n            <Register_new_account accountPair={accountPair} />\n          </Grid.Row>\n          {/* <Grid.Row stretched> */}\n          {/* <Grid.Row>\n            <Balances accountPair={accountPair} />\n          </Grid.Row> */}\n        </Grid>\n      </Container>\n      <Divider />\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n        </Grid>\n      </Container>\n\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'leaflet/dist/leaflet.css'\nimport LeafletMap from './LeafletMap.js'\n\nimport App from './App';\n\nReactDOM.render(\n  <App>\n    <LeafletMap />\n  </App>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(<App />,\n//   document.getElementById('root')\n// );\n"],"sourceRoot":""}